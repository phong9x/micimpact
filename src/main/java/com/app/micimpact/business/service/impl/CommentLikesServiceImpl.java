/*
 * Created on 28 12ì›” 2015 ( Time 15:48:18 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.CommentLikes;
import com.app.micimpact.bean.jpa.CommentLikesEntity;
import com.app.micimpact.business.service.CommentLikesService;
import com.app.micimpact.business.service.mapping.CommentLikesServiceMapper;
import com.app.micimpact.data.repository.jpa.CommentLikesJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CommentLikesService
 */
@Component
@Transactional
public class CommentLikesServiceImpl implements CommentLikesService {

	@Resource
	private CommentLikesJpaRepository commentLikesJpaRepository;

	@Resource
	private CommentLikesServiceMapper commentLikesServiceMapper;
	
	@Override
	public CommentLikes findById(Integer id) {
		CommentLikesEntity commentLikesEntity = commentLikesJpaRepository.findOne(id);
		return commentLikesServiceMapper.mapCommentLikesEntityToCommentLikes(commentLikesEntity);
	}

	@Override
	public List<CommentLikes> findAll() {
		Iterable<CommentLikesEntity> entities = commentLikesJpaRepository.findAll();
		List<CommentLikes> beans = new ArrayList<CommentLikes>();
		for(CommentLikesEntity commentLikesEntity : entities) {
			beans.add(commentLikesServiceMapper.mapCommentLikesEntityToCommentLikes(commentLikesEntity));
		}
		return beans;
	}

	@Override
	public CommentLikes save(CommentLikes commentLikes) {
		return update(commentLikes) ;
	}

	@Override
	public CommentLikes create(CommentLikes commentLikes) {
		CommentLikesEntity commentLikesEntity;
		if(commentLikes.getId() != null){
			commentLikesEntity = commentLikesJpaRepository.findOne(commentLikes.getId());
			if( commentLikesEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		commentLikesEntity = new CommentLikesEntity();
		commentLikesServiceMapper.mapCommentLikesToCommentLikesEntity(commentLikes, commentLikesEntity);
		CommentLikesEntity commentLikesEntitySaved = commentLikesJpaRepository.save(commentLikesEntity);
		return commentLikesServiceMapper.mapCommentLikesEntityToCommentLikes(commentLikesEntitySaved);
	}

	@Override
	public CommentLikes update(CommentLikes commentLikes) {
		CommentLikesEntity commentLikesEntity = commentLikesJpaRepository.findOne(commentLikes.getId());
		commentLikesServiceMapper.mapCommentLikesToCommentLikesEntity(commentLikes, commentLikesEntity);
		CommentLikesEntity commentLikesEntitySaved = commentLikesJpaRepository.save(commentLikesEntity);
		return commentLikesServiceMapper.mapCommentLikesEntityToCommentLikes(commentLikesEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		commentLikesJpaRepository.delete(id);
	}

	public CommentLikesJpaRepository getCommentLikesJpaRepository() {
		return commentLikesJpaRepository;
	}

	public void setCommentLikesJpaRepository(CommentLikesJpaRepository commentLikesJpaRepository) {
		this.commentLikesJpaRepository = commentLikesJpaRepository;
	}

	public CommentLikesServiceMapper getCommentLikesServiceMapper() {
		return commentLikesServiceMapper;
	}

	public void setCommentLikesServiceMapper(CommentLikesServiceMapper commentLikesServiceMapper) {
		this.commentLikesServiceMapper = commentLikesServiceMapper;
	}

	
	public CommentLikes findByUserIdAndCardIdAndCommentId(Integer userId, Integer cardId, Integer commentId) {
		CommentLikesEntity commentLikesEntitySaved = commentLikesJpaRepository.findByUserIdAndCardIdAndCommentId(userId, cardId, commentId);
		return commentLikesServiceMapper.mapCommentLikesEntityToCommentLikes(commentLikesEntitySaved);
	}
}
