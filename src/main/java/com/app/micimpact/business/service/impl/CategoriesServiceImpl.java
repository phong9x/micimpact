/*
 * Created on 9 12ì›” 2015 ( Time 17:41:09 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.Categories;
import com.app.micimpact.bean.jpa.CategoriesEntity;
import com.app.micimpact.business.service.CategoriesService;
import com.app.micimpact.business.service.mapping.CategoriesServiceMapper;
import com.app.micimpact.data.repository.jpa.CategoriesJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CategoriesService
 */
@Component
@Transactional
public class CategoriesServiceImpl implements CategoriesService {

	@Resource
	private CategoriesJpaRepository categoriesJpaRepository;

	@Resource
	private CategoriesServiceMapper categoriesServiceMapper;
	
	@Override
	public Categories findById(Integer id) {
		CategoriesEntity categoriesEntity = categoriesJpaRepository.findOne(id);
		return categoriesServiceMapper.mapCategoriesEntityToCategories(categoriesEntity);
	}

	@Override
	public List<Categories> findAll() {
		Iterable<CategoriesEntity> entities = categoriesJpaRepository.findAll();
		List<Categories> beans = new ArrayList<Categories>();
		for(CategoriesEntity categoriesEntity : entities) {
			beans.add(categoriesServiceMapper.mapCategoriesEntityToCategories(categoriesEntity));
		}
		return beans;
	}

	@Override
	public Categories save(Categories categories) {
		return update(categories) ;
	}

	@Override
	public Categories create(Categories categories) {
		CategoriesEntity categoriesEntity;
		if(categories.getId() != null){
			categoriesEntity = categoriesJpaRepository.findOne(categories.getId());
			if( categoriesEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		categoriesEntity = new CategoriesEntity();
		categoriesServiceMapper.mapCategoriesToCategoriesEntity(categories, categoriesEntity);
		CategoriesEntity categoriesEntitySaved = categoriesJpaRepository.save(categoriesEntity);
		return categoriesServiceMapper.mapCategoriesEntityToCategories(categoriesEntitySaved);
	}

	@Override
	public Categories update(Categories categories) {
		CategoriesEntity categoriesEntity = categoriesJpaRepository.findOne(categories.getId());
		categoriesServiceMapper.mapCategoriesToCategoriesEntity(categories, categoriesEntity);
		CategoriesEntity categoriesEntitySaved = categoriesJpaRepository.save(categoriesEntity);
		return categoriesServiceMapper.mapCategoriesEntityToCategories(categoriesEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		categoriesJpaRepository.delete(id);
	}

	public CategoriesJpaRepository getCategoriesJpaRepository() {
		return categoriesJpaRepository;
	}

	public void setCategoriesJpaRepository(CategoriesJpaRepository categoriesJpaRepository) {
		this.categoriesJpaRepository = categoriesJpaRepository;
	}

	public CategoriesServiceMapper getCategoriesServiceMapper() {
		return categoriesServiceMapper;
	}

	public void setCategoriesServiceMapper(CategoriesServiceMapper categoriesServiceMapper) {
		this.categoriesServiceMapper = categoriesServiceMapper;
	}

	@Override
	public Page<CategoriesEntity> findAll(Integer page, Integer size) {
		try {
			PageRequest request =  new PageRequest(page - 1, BasicEnvironment.PAGE_SIZE, 
					 new Sort(new Order(Direction.DESC, "id")));
			return  categoriesJpaRepository.findAll(request);
		} catch (Exception e) {
			return null;
		}
	}

}
