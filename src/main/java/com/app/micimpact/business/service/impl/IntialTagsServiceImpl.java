/*
 * Created on 21 12ì›” 2015 ( Time 20:17:00 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.IntialTags;
import com.app.micimpact.bean.jpa.IntialTagsEntity;
import com.app.micimpact.business.service.IntialTagsService;
import com.app.micimpact.business.service.mapping.IntialTagsServiceMapper;
import com.app.micimpact.data.repository.jpa.IntialTagsJpaRepository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of IntialTagsService
 */
@Component
@Transactional
public class IntialTagsServiceImpl implements IntialTagsService {

	@Resource
	private IntialTagsJpaRepository intialTagsJpaRepository;

	@Resource
	private IntialTagsServiceMapper intialTagsServiceMapper;
	
	@Override
	public IntialTags findById(Integer id) {
		IntialTagsEntity intialTagsEntity = intialTagsJpaRepository.findOne(id);
		return intialTagsServiceMapper.mapIntialTagsEntityToIntialTags(intialTagsEntity);
	}

	@Override
	public List<IntialTags> findAll() {
		Iterable<IntialTagsEntity> entities = intialTagsJpaRepository.findAll();
		List<IntialTags> beans = new ArrayList<IntialTags>();
		for(IntialTagsEntity intialTagsEntity : entities) {
			beans.add(intialTagsServiceMapper.mapIntialTagsEntityToIntialTags(intialTagsEntity));
		}
		return beans;
	}

	@Override
	public IntialTags save(IntialTags intialTags) {
		return update(intialTags) ;
	}

	@Override
	public IntialTags create(IntialTags intialTags) {
		IntialTagsEntity intialTagsEntity;
		if(intialTags.getId() != null){
			intialTagsEntity = intialTagsJpaRepository.findOne(intialTags.getId());
			if( intialTagsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		intialTagsEntity = new IntialTagsEntity();
		intialTagsServiceMapper.mapIntialTagsToIntialTagsEntity(intialTags, intialTagsEntity);
		IntialTagsEntity intialTagsEntitySaved = intialTagsJpaRepository.save(intialTagsEntity);
		return intialTagsServiceMapper.mapIntialTagsEntityToIntialTags(intialTagsEntitySaved);
	}

	@Override
	public IntialTags update(IntialTags intialTags) {
		IntialTagsEntity intialTagsEntity = intialTagsJpaRepository.findOne(intialTags.getId());
		intialTagsServiceMapper.mapIntialTagsToIntialTagsEntity(intialTags, intialTagsEntity);
		IntialTagsEntity intialTagsEntitySaved = intialTagsJpaRepository.save(intialTagsEntity);
		return intialTagsServiceMapper.mapIntialTagsEntityToIntialTags(intialTagsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		intialTagsJpaRepository.delete(id);
	}

	public IntialTagsJpaRepository getIntialTagsJpaRepository() {
		return intialTagsJpaRepository;
	}

	public void setIntialTagsJpaRepository(IntialTagsJpaRepository intialTagsJpaRepository) {
		this.intialTagsJpaRepository = intialTagsJpaRepository;
	}

	public IntialTagsServiceMapper getIntialTagsServiceMapper() {
		return intialTagsServiceMapper;
	}

	public void setIntialTagsServiceMapper(IntialTagsServiceMapper intialTagsServiceMapper) {
		this.intialTagsServiceMapper = intialTagsServiceMapper;
	}

	@Override
	public Page<IntialTagsEntity> findAll(Integer page, Integer size) {
		try {
			PageRequest request =  new PageRequest(page - 1, size, 
					 new Sort(new Order(Direction.DESC, "id")));
			return intialTagsJpaRepository.findAll(request);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
		
	}

}
