/*
 * Created on 9 12ì›” 2015 ( Time 17:41:16 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.Collections;
import com.app.micimpact.bean.jpa.CollectionsEntity;
import com.app.micimpact.business.service.CollectionsService;
import com.app.micimpact.business.service.mapping.CollectionsServiceMapper;
import com.app.micimpact.data.repository.jpa.CollectionsJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CollectionsService
 */
@Component
@Transactional
public class CollectionsServiceImpl implements CollectionsService {

	@Resource
	private CollectionsJpaRepository collectionsJpaRepository;

	@Resource
	private CollectionsServiceMapper collectionsServiceMapper;
	
	@Override
	public Collections findById(Integer id) {
		CollectionsEntity collectionsEntity = collectionsJpaRepository.findOne(id);
		return collectionsServiceMapper.mapCollectionsEntityToCollections(collectionsEntity);
	}


	@Override
	public Collections findByReveal() {
		CollectionsEntity collectionsEntity = collectionsJpaRepository.findByReveal(1);
		return collectionsServiceMapper.mapCollectionsEntityToCollections(collectionsEntity);
	}
	
	@Override
	public List<Collections> findAll() {
		Iterable<CollectionsEntity> entities = collectionsJpaRepository.findAll();
		List<Collections> beans = new ArrayList<Collections>();
		for(CollectionsEntity collectionsEntity : entities) {
			beans.add(collectionsServiceMapper.mapCollectionsEntityToCollections(collectionsEntity));
		}
		return beans;
	}

	@Override
	public Collections save(Collections collections) {
		return update(collections) ;
	}

	@Override
	public Collections create(Collections collections) {
		CollectionsEntity collectionsEntity;
		if(collections.getId() != null){
			collectionsEntity = collectionsJpaRepository.findOne(collections.getId());
			if( collectionsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		collectionsEntity = new CollectionsEntity();
		collectionsServiceMapper.mapCollectionsToCollectionsEntity(collections, collectionsEntity);
		CollectionsEntity collectionsEntitySaved = collectionsJpaRepository.save(collectionsEntity);
		return collectionsServiceMapper.mapCollectionsEntityToCollections(collectionsEntitySaved);
	}

	@Override
	public Collections update(Collections collections) {
		CollectionsEntity collectionsEntity = collectionsJpaRepository.findOne(collections.getId());
		collectionsServiceMapper.mapCollectionsToCollectionsEntity(collections, collectionsEntity);
		CollectionsEntity collectionsEntitySaved = collectionsJpaRepository.save(collectionsEntity);
		return collectionsServiceMapper.mapCollectionsEntityToCollections(collectionsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		collectionsJpaRepository.delete(id);
	}

	public CollectionsJpaRepository getCollectionsJpaRepository() {
		return collectionsJpaRepository;
	}

	public void setCollectionsJpaRepository(CollectionsJpaRepository collectionsJpaRepository) {
		this.collectionsJpaRepository = collectionsJpaRepository;
	}

	public CollectionsServiceMapper getCollectionsServiceMapper() {
		return collectionsServiceMapper;
	}

	public void setCollectionsServiceMapper(CollectionsServiceMapper collectionsServiceMapper) {
		this.collectionsServiceMapper = collectionsServiceMapper;
	}

}
