/*
 * Created on 9 12ì›” 2015 ( Time 17:40:56 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Images;
import com.app.micimpact.bean.jpa.CardsEntity;
import com.app.micimpact.bean.jpa.ChannelEntity;
import com.app.micimpact.bean.jpa.CommentsEntity;

import java.util.Date;

import com.app.micimpact.business.service.CardsService;
import com.app.micimpact.business.service.mapping.CardsServiceMapper;
import com.app.micimpact.data.repository.jpa.CardsJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CardsService
 */
@Component
@Transactional
public class CardsServiceImpl implements CardsService {

	@Resource
	private CardsJpaRepository cardsJpaRepository;

	@Resource
	private CardsServiceMapper cardsServiceMapper;
	
	@Override
	public Cards findById(Integer id) {
		CardsEntity cardsEntity = (CardsEntity)cardsJpaRepository.findOne(id);
			return cardsServiceMapper.mapCardsEntityToCards(cardsEntity);
	}
	
	@Override
	public CardsEntity findOne(Integer id) {
			return cardsJpaRepository.findOne(id);
	}

	@Override
	public List<Cards> findAll() {
		Iterable<CardsEntity> entities = cardsJpaRepository.findAll();
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	@Override
	public List<Cards> findByLastId(Integer lastId, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByLastId(lastId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	@Override
	public List<Cards> findByCount(Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCount(count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public Cards save(Cards cards) {
		return update(cards) ;
	}

	@Override
	public Cards create(Cards cards) {
		CardsEntity cardsEntity;
		if(cards.getId() != null){
			cardsEntity = cardsJpaRepository.findOne(cards.getId());
			if( cardsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		cardsEntity = new CardsEntity();
		cardsServiceMapper.mapCardsToCardsEntity(cards, cardsEntity);
		CardsEntity cardsEntitySaved = cardsJpaRepository.save(cardsEntity);
		return cardsServiceMapper.mapCardsEntityToCards(cardsEntitySaved);
	}

	@Override
	public Cards update(Cards cards) {
		CardsEntity cardsEntity = cardsJpaRepository.findOne(cards.getId());
		cardsServiceMapper.mapCardsToCardsEntity(cards, cardsEntity);
		CardsEntity cardsEntitySaved = cardsJpaRepository.save(cardsEntity);
		return cardsServiceMapper.mapCardsEntityToCards(cardsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		cardsJpaRepository.delete(id);
	}

	public CardsJpaRepository getCardsJpaRepository() {
		return cardsJpaRepository;
	}

	public void setCardsJpaRepository(CardsJpaRepository cardsJpaRepository) {
		this.cardsJpaRepository = cardsJpaRepository;
	}

	public CardsServiceMapper getCardsServiceMapper() {
		return cardsServiceMapper;
	}

	public void setCardsServiceMapper(CardsServiceMapper cardsServiceMapper) {
		this.cardsServiceMapper = cardsServiceMapper;
	}
	
	public List<Cards> findByWeekPopularByLastId(Integer lastId, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByWeekPopularByLastId(lastId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;		
	}

	public List<Cards> findByWeekPopular(Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByWeekPopular(count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;		
	}
	
	public List<Cards> findByIdIn(Integer[] ids)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByIdIn(ids);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards> findByUserId(Integer user_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByUserId(user_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards> findByUserId(Integer user_id, Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByUserId(user_id, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	
	public List<Cards> findByTagIn(String[] tags, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByTagIn(tags, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards> findByTagIn(String[] tags, Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByTagIn(tags, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards> findByCategoryId(Integer categoryId, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryId(categoryId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards> findByCategoryId(Integer categoryId, Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryId(categoryId, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}

	public List<Cards>    findByLikeUserId(Integer userId, Integer lastId, int count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByLikeUserId(userId, lastId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}
	
	public List<Cards>    findByLikeUserId(Integer userId, int count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByLikeUserId(userId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}

	public List<Cards> findBySortByLikes(Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findBySortByLikes(count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	public List<Cards> findBySortByLikes(Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findBySortByLikes(last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	public List<Cards> findByCategoryIdSortByLikes(Integer categoryId, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdSortByLikes(categoryId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	public List<Cards> findByCategoryIdSortByLikes(Integer categoryId, Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdSortByLikes(categoryId, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	public List<Cards> findMainList(Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findMainList(count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	public List<Cards> findMainList(Integer lastId, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findMainList(lastId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public Page<CardsEntity> findAll(Integer pageNumber) {
		// TODO Auto-generated method stub
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		return cardsJpaRepository.findAll(request);
	}
	
	@Override
	public Page<CardsEntity> findAll(Integer pageNumber,Integer size, String order) {
		// TODO Auto-generated method stub
		PageRequest request =  new PageRequest(pageNumber - 1, size, 
				 new Sort(new Order(Direction.DESC, order)));
		
		return cardsJpaRepository.findAll(request);
	}

	@Override
	public Page<CardsEntity> findSearchAll(Integer pageNumber, Integer option,
			String keyword) {
		// TODO Auto-generated method stub

		String value = "%"+keyword+"%";//ê²€ìƒ‰ ì¡°ê±´
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		switch (option) {
			case 1:
				return cardsJpaRepository.findByTitleLike(request ,value);
		}
		
		return null;
	}
	
	
	public List<Cards> findByActor(String actor, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByActor(actor, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	public List<Cards> findByActor(String actor, Integer last_id, Integer count)
	{
		Iterable<CardsEntity> entities = cardsJpaRepository.findByActor(actor, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}
	
	@Override
	public Page<CardsEntity> findByChannelId(Integer channelId, Integer page, Integer size) {
		PageRequest request =  new PageRequest(page - 1, size, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		try {
			return cardsJpaRepository.findByChannelId( request,channelId);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
				
		
		
	}

	@Override
	public List<Cards> findByChannelId(Integer channelId) {
		try {
			List<CardsEntity> listEntity=cardsJpaRepository.findByChannelId( channelId);
			List<Cards> list=new ArrayList<>();
			Cards c=new Cards();
			for (CardsEntity cards : listEntity) {
				c=cardsServiceMapper.mapCardsEntityToCards(cards);
				list.add(c);
			}
			return list;
		} catch (Exception e) {
			return null;
		}
	}

	@Override
	public List<Cards> findOtherCardByCategoryId(Integer categoryId, Integer currentId, int count) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findOtherCardByCategoryId(categoryId, currentId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;	
	}

	
	@Override
	public Page<CardsEntity> findByChannelId_Search(String title,Integer channelId,Integer page, Integer size, String order) {
		try {
			PageRequest request =  new PageRequest(page - 1, size, new Sort(new Order(Direction.DESC, order)));
			return cardsJpaRepository.findByChannel_Search(title,channelId, request);
		} catch (Exception e) {
			return null;
		}
		
	}

	@Override
	public void deleteByChannelId(Integer channel_id) {
		cardsJpaRepository.deleteByChannelId(channel_id);
		
	}

	@Override
	public List<Cards> findBySortByLikesExceptCard(Integer count,Integer card_id) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findBySortByLikesExceptCard(count, card_id);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findBySortByLikesExceptCard(Integer last_id, Integer count, Integer card_id) {
		
		Iterable<CardsEntity> entities = cardsJpaRepository.findBySortByLikesExceptCard(last_id, count, card_id);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByCategoryIdSortByLikesExceptCard(Integer categoryId, Integer count, Integer card_id) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdSortByLikesExceptCard(categoryId, count, card_id);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByCategoryIdSortByLikesExceptCard(Integer categoryId, Integer last_id, Integer count,
			Integer card_id) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdSortByLikesExceptCard(categoryId, last_id, count, card_id);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByRecommendedSortByLikesExceptCard(Integer count) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByRecommendedSortByLikesExceptCard( count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByRecommendedSortByLikesExceptCard(Integer last_id, Integer count) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByRecommendedSortByLikesExceptCard(last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByCategoryIdRecommendSortByLikesExceptCard(Integer categoryId, Integer count) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdRecommendSortByLikesExceptCard(categoryId, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public List<Cards> findByCategoryIdRecommendSortByLikesExceptCard(Integer categoryId, Integer last_id,
			Integer count) {
		Iterable<CardsEntity> entities = cardsJpaRepository.findByCategoryIdRecommendSortByLikesExceptCard(categoryId, last_id, count);
		List<Cards> beans = new ArrayList<Cards>();
		for(CardsEntity cardsEntity : entities) {
			beans.add(cardsServiceMapper.mapCardsEntityToCards(cardsEntity));
		}
		return beans;
	}

	@Override
	public Page<CardsEntity> findAllOrder(Integer pageNumber, String title,String actor, String order) {
		try {
			PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
					 new Sort(new Order(Direction.DESC, order)));
			
			return cardsJpaRepository.findByTitleLikeAndActorLike(request, title,actor);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
		
	}



	

}
