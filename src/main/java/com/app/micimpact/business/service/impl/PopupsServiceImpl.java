/*
 * Created on 20 5�� 2015 ( Time 17:27:55 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.app.micimpact.bean.Popups;
import com.app.micimpact.bean.jpa.PopupsEntity;
import com.app.micimpact.business.service.PopupsService;
import com.app.micimpact.business.service.mapping.PopupsServiceMapper;
import com.app.micimpact.data.repository.jpa.PopupsJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;

/**
 * Implementation of PopupsService
 */
@Component
@Transactional
public class PopupsServiceImpl implements PopupsService {

	@Resource
	private PopupsJpaRepository popupsJpaRepository;

	@Resource
	private PopupsServiceMapper popupsServiceMapper;
	
	@Override
	public Popups findById(Integer id) {
		PopupsEntity popupsEntity = popupsJpaRepository.findOne(id);
		return popupsServiceMapper.mapPopupsEntityToPopups(popupsEntity);
	}

	@Override
	public List<Popups> findAll() {
		Iterable<PopupsEntity> entities = popupsJpaRepository.findAll();
		List<Popups> beans = new ArrayList<Popups>();
		for(PopupsEntity popupsEntity : entities) {
			beans.add(popupsServiceMapper.mapPopupsEntityToPopups(popupsEntity));
		}
		return beans;
	}

	@Override
	public Popups save(Popups popups) {
		return update(popups) ;
	}

	@Override
	public Popups create(Popups popups) {
		PopupsEntity popupsEntity;
		if(popups.getId() != null){
			popupsEntity = popupsJpaRepository.findOne(popups.getId());
			if( popupsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		popupsEntity = new PopupsEntity();
		popupsServiceMapper.mapPopupsToPopupsEntity(popups, popupsEntity);
		PopupsEntity popupsEntitySaved = popupsJpaRepository.save(popupsEntity);
		return popupsServiceMapper.mapPopupsEntityToPopups(popupsEntitySaved);
	}

	@Override
	public Popups update(Popups popups) {
		PopupsEntity popupsEntity = popupsJpaRepository.findOne(popups.getId());
		popupsServiceMapper.mapPopupsToPopupsEntity(popups, popupsEntity);
		PopupsEntity popupsEntitySaved = popupsJpaRepository.save(popupsEntity);
		return popupsServiceMapper.mapPopupsEntityToPopups(popupsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		popupsJpaRepository.delete(id);
	}

	public PopupsJpaRepository getPopupsJpaRepository() {
		return popupsJpaRepository;
	}

	public void setPopupsJpaRepository(PopupsJpaRepository popupsJpaRepository) {
		this.popupsJpaRepository = popupsJpaRepository;
	}

	public PopupsServiceMapper getPopupsServiceMapper() {
		return popupsServiceMapper;
	}

	public void setPopupsServiceMapper(PopupsServiceMapper popupsServiceMapper) {
		this.popupsServiceMapper = popupsServiceMapper;
	}

	@Override
	public Page<PopupsEntity> findAll(Integer pageNumber) {
		// TODO Auto-generated method stub
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		return popupsJpaRepository.findAll(request);
	}

	@Override
	public Page<PopupsEntity> findSearchAll(Integer pageNumber, Integer option,
			String keyword) {
		// TODO Auto-generated method stub
		String value = "%"+keyword+"%";//검색 조건
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));

		switch (option) {
			case 1:
				return popupsJpaRepository.findByNameLike(request ,value);
		}
		
		return null;
	}

}
