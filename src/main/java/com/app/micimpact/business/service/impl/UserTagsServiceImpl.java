/*
 * Created on 21 12ì›” 2015 ( Time 20:29:14 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.UserTags;
import com.app.micimpact.bean.jpa.UserTagsEntity;
import com.app.micimpact.business.service.UserTagsService;
import com.app.micimpact.business.service.mapping.UserTagsServiceMapper;
import com.app.micimpact.data.repository.jpa.UserTagsJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UserTagsService
 */
@Component
@Transactional
public class UserTagsServiceImpl implements UserTagsService {

	@Resource
	private UserTagsJpaRepository userTagsJpaRepository;

	@Resource
	private UserTagsServiceMapper userTagsServiceMapper;
	
	@Override
	public UserTags findById(Integer id) {
		UserTagsEntity userTagsEntity = userTagsJpaRepository.findOne(id);
		return userTagsServiceMapper.mapUserTagsEntityToUserTags(userTagsEntity);
	}

	@Override
	public List<UserTags> findAll() {
		Iterable<UserTagsEntity> entities = userTagsJpaRepository.findAll();
		List<UserTags> beans = new ArrayList<UserTags>();
		for(UserTagsEntity userTagsEntity : entities) {
			beans.add(userTagsServiceMapper.mapUserTagsEntityToUserTags(userTagsEntity));
		}
		return beans;
	}

	@Override
	public UserTags save(UserTags userTags) {
		return update(userTags) ;
	}

	@Override
	public UserTags create(UserTags userTags) {
		UserTagsEntity userTagsEntity;
		if(userTags.getId() != null){
			userTagsEntity = userTagsJpaRepository.findOne(userTags.getId());
			if( userTagsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		userTagsEntity = new UserTagsEntity();
		userTagsServiceMapper.mapUserTagsToUserTagsEntity(userTags, userTagsEntity);
		UserTagsEntity userTagsEntitySaved = userTagsJpaRepository.save(userTagsEntity);
		return userTagsServiceMapper.mapUserTagsEntityToUserTags(userTagsEntitySaved);
	}

	@Override
	public UserTags update(UserTags userTags) {
		UserTagsEntity userTagsEntity = userTagsJpaRepository.findOne(userTags.getId());
		userTagsServiceMapper.mapUserTagsToUserTagsEntity(userTags, userTagsEntity);
		UserTagsEntity userTagsEntitySaved = userTagsJpaRepository.save(userTagsEntity);
		return userTagsServiceMapper.mapUserTagsEntityToUserTags(userTagsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userTagsJpaRepository.delete(id);
	}

	@Override
	public void deleteByUserId( Integer user_id)
	{
		userTagsJpaRepository.deleteByUserId(user_id);
	}
	
	public UserTagsJpaRepository getUserTagsJpaRepository() {
		return userTagsJpaRepository;
	}

	public void setUserTagsJpaRepository(UserTagsJpaRepository userTagsJpaRepository) {
		this.userTagsJpaRepository = userTagsJpaRepository;
	}

	public UserTagsServiceMapper getUserTagsServiceMapper() {
		return userTagsServiceMapper;
	}

	public void setUserTagsServiceMapper(UserTagsServiceMapper userTagsServiceMapper) {
		this.userTagsServiceMapper = userTagsServiceMapper;
	}
	
	public List<UserTags> findByUserId(Integer user_id)
	{  
		Iterable<UserTagsEntity> entities = userTagsJpaRepository.findByUserId(user_id);
		List<UserTags> beans = new ArrayList<UserTags>();
		for(UserTagsEntity userTagsEntity : entities) {
			beans.add(userTagsServiceMapper.mapUserTagsEntityToUserTags(userTagsEntity));
		}
		return beans;
	}

}
