/*
 * Created on 9 12ì›” 2015 ( Time 17:41:16 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.Comments;
import com.app.micimpact.bean.PageComment;
import com.app.micimpact.bean.PageReport;
import com.app.micimpact.bean.ReportComment;
import com.app.micimpact.bean.jpa.CommentsEntity;

import java.util.Date;

import com.app.micimpact.business.service.CommentsService;
import com.app.micimpact.business.service.mapping.CommentsServiceMapper;
import com.app.micimpact.data.repository.jpa.CommentsJpaRepository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CommentsService
 */
@Component
@Transactional
public class CommentsServiceImpl implements CommentsService {

	@Resource
	private CommentsJpaRepository commentsJpaRepository;

	@Resource
	private CommentsServiceMapper commentsServiceMapper;
	
	@Override
	public Comments findById(Integer id) {
		try {
			CommentsEntity commentsEntity = commentsJpaRepository.findOne(id);
			return commentsServiceMapper.mapCommentsEntityToComments(commentsEntity);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
		
	}

	@Override
	public List<Comments> findAll() {
		Iterable<CommentsEntity> entities = commentsJpaRepository.findAll();
		List<Comments> beans = new ArrayList<Comments>();
		for(CommentsEntity commentsEntity : entities) {
			beans.add(commentsServiceMapper.mapCommentsEntityToComments(commentsEntity));
		}
		return beans;
	}

	@Override
	public Comments save(Comments comments) {
		return update(comments) ;
	}

	@Override
	public Comments create(Comments comments) {
		CommentsEntity commentsEntity;
		if(comments.getId() != null){
			commentsEntity = commentsJpaRepository.findOne(comments.getId());
			if( commentsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		commentsEntity = new CommentsEntity();
		commentsServiceMapper.mapCommentsToCommentsEntity(comments, commentsEntity);
		CommentsEntity commentsEntitySaved = commentsJpaRepository.save(commentsEntity);
		return commentsServiceMapper.mapCommentsEntityToComments(commentsEntitySaved);
		
	}

	@Override
	public Comments update(Comments comments) {
		CommentsEntity commentsEntity = commentsJpaRepository.findOne(comments.getId());
		commentsServiceMapper.mapCommentsToCommentsEntity(comments, commentsEntity);
		CommentsEntity commentsEntitySaved = commentsJpaRepository.save(commentsEntity);
		return commentsServiceMapper.mapCommentsEntityToComments(commentsEntitySaved);
	}

	public List<Comments>    findByCardId(Integer userId, Integer cardId, int count)
	{
		Iterable<Object[]> entities = commentsJpaRepository.findByCardId(userId, cardId, count);
		List<Comments> beans = new ArrayList<Comments>();
		for(Object[] commentsEntity : entities) {
			
			Comments comment = new Comments();
			comment.setId((Integer)commentsEntity[0]);
			comment.setCardId((Integer)commentsEntity[1]);
			comment.setUserId((Integer)commentsEntity[2]);
			comment.setBody((String)commentsEntity[3]);
			comment.setCountLike((Integer)commentsEntity[4]);
			comment.setUserName((String)commentsEntity[5]);
			comment.setCreatedAt((Date)commentsEntity[6]);
			comment.setIsLike(((BigInteger)commentsEntity[7]).intValue()>0);
			beans.add(comment);
		}
		return beans;
	}
	
	public List<Comments>    findByCardId(Integer userId, Integer cardId, Integer lastId, int count)
	{
		Iterable<Object[]> entities = commentsJpaRepository.findByCardId(userId, cardId, lastId, count);
		List<Comments> beans = new ArrayList<Comments>();
		for(Object[] commentsEntity : entities) {
			
			Comments comment = new Comments();
			comment.setId((Integer)commentsEntity[0]);
			comment.setCardId((Integer)commentsEntity[1]);
			comment.setUserId((Integer)commentsEntity[2]);
			comment.setBody((String)commentsEntity[3]);
			comment.setCountLike((Integer)commentsEntity[4]);
			comment.setUserName((String)commentsEntity[5]);
			comment.setCreatedAt((Date)commentsEntity[6]);
			comment.setIsLike(((BigInteger)commentsEntity[7]).intValue()>0);
			
			beans.add(comment);
		}
		return beans;
	}
	
	@Override
	public void delete(Integer id) {
		commentsJpaRepository.delete(id);
	}

	public CommentsJpaRepository getCommentsJpaRepository() {
		return commentsJpaRepository;
	}

	public void setCommentsJpaRepository(CommentsJpaRepository commentsJpaRepository) {
		this.commentsJpaRepository = commentsJpaRepository;
	}

	public CommentsServiceMapper getCommentsServiceMapper() {
		return commentsServiceMapper;
	}

	public void setCommentsServiceMapper(CommentsServiceMapper commentsServiceMapper) {
		this.commentsServiceMapper = commentsServiceMapper;
	}

	@Override
	public Page<CommentsEntity> getBy_UserId(Integer cardId, Integer page, Integer size, String order) {
		try {
			PageRequest request =  new PageRequest(page - 1, size, 
					 new Sort(new Order(Direction.DESC, order)));
			return commentsJpaRepository.getBy_CardId(cardId, request);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public List<Comments> findByCardId(Integer cardId, int count) {
		Iterable<Object[]> entities = commentsJpaRepository.findByCardId(cardId, count);
		List<Comments> beans = new ArrayList<Comments>();
		for(Object[] commentsEntity : entities) {
			
			Comments comment = new Comments();
			comment.setId((Integer)commentsEntity[0]);
			comment.setCardId((Integer)commentsEntity[1]);
			comment.setUserId((Integer)commentsEntity[2]);
			comment.setBody((String)commentsEntity[3]);
			comment.setCountLike((Integer)commentsEntity[4]);
			comment.setUserName((String)commentsEntity[5]);
			comment.setCreatedAt((Date)commentsEntity[6]);
			
			beans.add(comment);
		}
		return beans;
	}

	@Override
	public PageComment findComment(Integer comment_id, Integer page, Integer size) {
		 int begin=0;
		 int end=size;
		if(page>0){
			page =page-1;
			begin=page*size;
			end=page*size+size;
		}
		try {
			Iterable<Object[]> entities = commentsJpaRepository.findComment(comment_id, begin, end);
			List<Comments> beans = new ArrayList<Comments>();
			for(Object[] commentsEntity : entities) {
				Comments comment = new Comments();
				comment.setId((Integer)commentsEntity[0]);
				comment.setCardId((Integer)commentsEntity[1]);
				comment.setUserId((Integer)commentsEntity[2]);
				comment.setUserName((String)commentsEntity[3]);
				comment.setBody((String)commentsEntity[4]);
				comment.setCreatedAt((Date)commentsEntity[5]);
				comment.setIsShow((Integer)commentsEntity[6]);
				beans.add(comment);
			}
			 PageComment p =new PageComment();
			 p.setList(beans);
			 p.setCurrentIndex(page);
			 Integer count_all=commentsJpaRepository.totalPage(comment_id);
			 Integer total_page=0;
			 total_page=count_all/size;
			 if(count_all%size!=0){
				 total_page=total_page+1;
			 }	
			 p.setTotalPages(total_page);
			 return p;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
		
		
	}

	@Override
	public Page<CommentsEntity> findAllReport(Integer page, Integer size) {
		
		try {
			PageRequest request =  new PageRequest(page - 1, size, 
					 new Sort(new Order(Direction.DESC, "countReport")));
			return commentsJpaRepository.findAllReport(request);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}
	
	

}
