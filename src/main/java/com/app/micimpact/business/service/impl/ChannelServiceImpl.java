/*
 * Created on 9 Mar 2016 ( Time 11:12:31 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Channel;
import com.app.micimpact.bean.Comments;
import com.app.micimpact.bean.PageComment;
import com.app.micimpact.bean.jpa.CardsEntity;
import com.app.micimpact.bean.jpa.ChannelEntity;
import com.app.micimpact.bean.jpa.UsersEntity;
import com.app.micimpact.business.service.ChannelService;
import com.app.micimpact.business.service.mapping.ChannelServiceMapper;
import com.app.micimpact.data.repository.jpa.ChannelJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ChannelService
 */
@Component
@Transactional
public class ChannelServiceImpl implements ChannelService {

	@Resource
	private ChannelJpaRepository channelJpaRepository;

	@Resource
	private ChannelServiceMapper channelServiceMapper;
	
	@Override
	public Channel findById(Integer id) {
		ChannelEntity channelEntity = channelJpaRepository.findOne(id);
		return channelServiceMapper.mapChannelEntityToChannel(channelEntity);
	}
	
	@Override
	public ChannelEntity findOne(Integer id) {
		return channelJpaRepository.findOne(id);
	}

	@Override
	public List<Channel> findAll() {
		Iterable<ChannelEntity> entities = channelJpaRepository.findAll();
		List<Channel> beans = new ArrayList<Channel>();
		for(ChannelEntity channelEntity : entities) {
			beans.add(channelServiceMapper.mapChannelEntityToChannel(channelEntity));
		}
		return beans;
	}

	@Override
	public Channel save(Channel channel) {
		return update(channel) ;
	}

	@Override
	public Channel create(Channel channel) {
		ChannelEntity channelEntity;
		if(channel.getId() != null){
			channelEntity = channelJpaRepository.findOne(channel.getId());
			if( channelEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		channelEntity = new ChannelEntity();
		channelServiceMapper.mapChannelToChannelEntity(channel, channelEntity);
		ChannelEntity channelEntitySaved = channelJpaRepository.save(channelEntity);
		return channelServiceMapper.mapChannelEntityToChannel(channelEntitySaved);
	}

	@Override
	public Channel update(Channel channel) {
		ChannelEntity channelEntity = channelJpaRepository.findOne(channel.getId());
		channelServiceMapper.mapChannelToChannelEntity(channel, channelEntity);
		ChannelEntity channelEntitySaved = channelJpaRepository.save(channelEntity);
		return channelServiceMapper.mapChannelEntityToChannel(channelEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		channelJpaRepository.delete(id);
	}

	public ChannelJpaRepository getChannelJpaRepository() {
		return channelJpaRepository;
	}

	public void setChannelJpaRepository(ChannelJpaRepository channelJpaRepository) {
		this.channelJpaRepository = channelJpaRepository;
	}

	public ChannelServiceMapper getChannelServiceMapper() {
		return channelServiceMapper;
	}

	public void setChannelServiceMapper(ChannelServiceMapper channelServiceMapper) {
		this.channelServiceMapper = channelServiceMapper;
	}
	
	@Override
	public Page<ChannelEntity> findAll(Integer pageNumber) {
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		return channelJpaRepository.findAll(request);
	}

	@Override
	public List<ChannelEntity> findByUserId(Integer user_id) {
		try {
			return channelJpaRepository.getByUserId(user_id);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public List<ChannelEntity> findAllEntity() {
		try {
			return channelJpaRepository.findAll();
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public Page<ChannelEntity> getBy_UserId(Integer user_id, Integer page, Integer size) {
		try {
			PageRequest request =  new PageRequest(page - 1, size, 
					 new Sort(new Order(Direction.DESC, "id")));
			return channelJpaRepository.getBy_UserId(user_id, request);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public Page<ChannelEntity> findChannelByType(Integer type, Integer page, Integer size) {
		try {
			PageRequest request =  new PageRequest(page - 1, size, 
					 new Sort(new Order(Direction.DESC, "id")));
			return channelJpaRepository.findChannelByType(type, request);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public List<ChannelEntity> findChannelLike(Integer user_id, Integer page, Integer size) {
		 int begin=0;
		 int end=size;
		if(page>0){
			page =page-1;
			begin=page*size;
			end=page*size+size;
		}
		try {
			Iterable<Object[]> entities = channelJpaRepository.findChannelLike(user_id, begin, size);
			List<ChannelEntity> beans = new ArrayList<ChannelEntity>();
			for(Object[] commentsEntity : entities) {
				ChannelEntity c =new ChannelEntity();
				c.setId((Integer)commentsEntity[0]);
				c.setTitle((String)commentsEntity[1]);
				c.setIntroduce((String)commentsEntity[2]);
				c.setLikes((Integer)commentsEntity[3]);
				c.setFavorite((Integer)commentsEntity[4]);
				c.setType(((Integer)commentsEntity[5]));
				c.setCreatedAt((Date)commentsEntity[6]);
				CardsEntity card=new CardsEntity();
				card.setId((Integer)commentsEntity[7]);
				card.setThumbnailUrl((String)commentsEntity[8]);
				card.setTargetUrl((String)commentsEntity[9]);
				c.setCards(card);
				UsersEntity u=new UsersEntity();
				u.setId((Integer)commentsEntity[10]);
				u.setName((String)commentsEntity[11]);
				u.setJob((String)commentsEntity[12]);
				c.setUsers(u);
				beans.add(c);
			}
			 return beans;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalPage_findChannelLike(Integer user_id) {
		try {
			return channelJpaRepository.totalPage_findChannelLike(user_id);
		} catch (Exception e) {
			return 0;
		}
	}

	@Override
	public Page<ChannelEntity> findAllByIsShow(Integer pageNumber, Integer is_show) {
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		return channelJpaRepository.findAllByIsShow(request, is_show);
	}

	

}
