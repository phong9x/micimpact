/*
 * Created on 21 12ì›” 2015 ( Time 20:29:14 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.SearchTags;
import com.app.micimpact.bean.jpa.SearchTagsEntity;
import com.app.micimpact.business.service.SearchTagsService;
import com.app.micimpact.business.service.mapping.SearchTagsServiceMapper;
import com.app.micimpact.data.repository.jpa.SearchTagsJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of SearchTagsService
 */
@Component
@Transactional
public class SearchTagsServiceImpl implements SearchTagsService {

	@Resource
	private SearchTagsJpaRepository searchTagsJpaRepository;

	@Resource
	private SearchTagsServiceMapper searchTagsServiceMapper;
	
	@Override
	public SearchTags findById(Integer id) {
		SearchTagsEntity searchTagsEntity = searchTagsJpaRepository.findOne(id);
		return searchTagsServiceMapper.mapSearchTagsEntityToSearchTags(searchTagsEntity);
	}

	@Override
	public List<SearchTags> findAll() {
		Iterable<SearchTagsEntity> entities = searchTagsJpaRepository.findAll();
		List<SearchTags> beans = new ArrayList<SearchTags>();
		for(SearchTagsEntity searchTagsEntity : entities) {
			beans.add(searchTagsServiceMapper.mapSearchTagsEntityToSearchTags(searchTagsEntity));
		}
		return beans;
	}

	@Override
	public SearchTags save(SearchTags searchTags) {
		return update(searchTags) ;
	}

	@Override
	public SearchTags create(SearchTags searchTags) {
		SearchTagsEntity searchTagsEntity;
		if(searchTags.getId() != null){
			searchTagsEntity = searchTagsJpaRepository.findOne(searchTags.getId());
			if( searchTagsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		searchTagsEntity = new SearchTagsEntity();
		searchTagsServiceMapper.mapSearchTagsToSearchTagsEntity(searchTags, searchTagsEntity);
		SearchTagsEntity searchTagsEntitySaved = searchTagsJpaRepository.save(searchTagsEntity);
		return searchTagsServiceMapper.mapSearchTagsEntityToSearchTags(searchTagsEntitySaved);
	}

	@Override
	public SearchTags update(SearchTags searchTags) {
		SearchTagsEntity searchTagsEntity = searchTagsJpaRepository.findOne(searchTags.getId());
		searchTagsServiceMapper.mapSearchTagsToSearchTagsEntity(searchTags, searchTagsEntity);
		SearchTagsEntity searchTagsEntitySaved = searchTagsJpaRepository.save(searchTagsEntity);
		return searchTagsServiceMapper.mapSearchTagsEntityToSearchTags(searchTagsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		searchTagsJpaRepository.delete(id);
	}

	public SearchTagsJpaRepository getSearchTagsJpaRepository() {
		return searchTagsJpaRepository;
	}

	public void setSearchTagsJpaRepository(SearchTagsJpaRepository searchTagsJpaRepository) {
		this.searchTagsJpaRepository = searchTagsJpaRepository;
	}

	public SearchTagsServiceMapper getSearchTagsServiceMapper() {
		return searchTagsServiceMapper;
	}

	public void setSearchTagsServiceMapper(SearchTagsServiceMapper searchTagsServiceMapper) {
		this.searchTagsServiceMapper = searchTagsServiceMapper;
	}

}
