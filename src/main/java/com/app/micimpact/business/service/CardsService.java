/*
 * Created on 9 12ì›” 2015 ( Time 17:40:56 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.jpa.CardsEntity;
import com.app.micimpact.bean.jpa.ChannelEntity;

/**
 * Business Service Interface for entity Cards.
 */
public interface CardsService { 

	/**
	 * Loads an entity from the database using its Primary Key
	 * @param id
	 * @return entity
	 */
	Cards findById( Integer id  ) ;

	/**
	 * Loads all entities.
	 * @return all entities
	 */
	List<Cards> findAll();

	List<Cards> findByCount(Integer count);
	List<Cards> findByLastId(Integer lastId, Integer count);
	List<Cards> findMainList(Integer count);
	List<Cards> findMainList(Integer lastId, Integer count);
	
	List<Cards> findByWeekPopularByLastId(Integer lastId, Integer count);
	List<Cards> findByWeekPopular(Integer count);
	List<Cards> findByIdIn(Integer[] ids);
	List<Cards> findByUserId(Integer user_id, Integer count);
	List<Cards> findByUserId(Integer user_id, Integer last_id, Integer count);
	List<Cards> findByTagIn(String[] tags, Integer count);
	List<Cards> findByTagIn(String[] tags, Integer last_id, Integer count);
	List<Cards> findByCategoryId(Integer categoryId, Integer count);
	List<Cards> findByCategoryId(Integer categoryId, Integer last_id, Integer count);
	List<Cards> findByLikeUserId(Integer userId, Integer lastId, int count);
	List<Cards> findByLikeUserId(Integer userId, int count);
	List<Cards> findByActor(String actor, Integer count);
	List<Cards> findByActor(String actor, Integer last_id, Integer count);
	List<Cards> findBySortByLikes(Integer count);
	List<Cards> findBySortByLikes(Integer last_id, Integer count);
	List<Cards> findBySortByLikesExceptCard(Integer count,Integer card_id);
	List<Cards> findBySortByLikesExceptCard(Integer last_id, Integer count,Integer card_id);
	List<Cards> findByCategoryIdSortByLikes(Integer categoryId, Integer count);
	List<Cards> findByCategoryIdSortByLikes(Integer categoryId, Integer last_id, Integer count);
	List<Cards> findByCategoryIdSortByLikesExceptCard(Integer categoryId, Integer count,Integer card_id);
	List<Cards> findByCategoryIdSortByLikesExceptCard(Integer categoryId, Integer last_id, Integer count,Integer card_id);
	/**
	 * Saves the given entity in the database (create or update)
	 * @param entity
	 * @return entity
	 */
	Cards save(Cards entity);

	/**
	 * Updates the given entity in the database
	 * @param entity
	 * @return
	 */
	Cards update(Cards entity);

	/**
	 * Creates the given entity in the database
	 * @param entity
	 * @return
	 */
	Cards create(Cards entity);

	/**
	 * Deletes an entity using its Primary Key
	 * @param id
	 */
	void delete( Integer id );


	Page<CardsEntity> findAll(Integer pageNumber);

	Page<CardsEntity> findSearchAll(Integer pageNumber, Integer option, String keyword);
	
	Page<CardsEntity> findByChannelId(Integer channelId,Integer page, Integer size);
	
	List<Cards> findByChannelId(Integer channelId);
	
	CardsEntity findOne(Integer id);
	
	List<Cards>    findOtherCardByCategoryId(Integer categoryId, Integer currentId, int count);
	
	Page<CardsEntity> findByChannelId_Search(String title,Integer channelId,Integer page, Integer size, String order);
	
	void    deleteByChannelId(Integer channel_id);
	
	Page<CardsEntity> findAll(Integer pageNumber,Integer size, String order);
	
	List<Cards> findByRecommendedSortByLikesExceptCard(Integer count);
	
	List<Cards> findByRecommendedSortByLikesExceptCard(Integer last_id, Integer count);
	
	List<Cards> findByCategoryIdRecommendSortByLikesExceptCard(Integer categoryId, Integer count);
	
	List<Cards> findByCategoryIdRecommendSortByLikesExceptCard(Integer categoryId, Integer last_id, Integer count);
	
	Page<CardsEntity> findAllOrder(Integer pageNumber, String title, String actor, String order);
	
	
}
