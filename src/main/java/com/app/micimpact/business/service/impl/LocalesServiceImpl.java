/*
 * Created on 13 5�� 2015 ( Time 19:15:54 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.app.micimpact.bean.Locales;
import com.app.micimpact.bean.jpa.LocalesEntity;
import com.app.micimpact.business.service.LocalesService;
import com.app.micimpact.business.service.mapping.LocalesServiceMapper;
import com.app.micimpact.data.repository.jpa.LocalesJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;

/**
 * Implementation of LocalesService
 */
@Component
@Transactional
public class LocalesServiceImpl implements LocalesService {

	@Resource
	private LocalesJpaRepository localesJpaRepository;

	@Resource
	private LocalesServiceMapper localesServiceMapper;
	
	@Override
	public Locales findById(Integer id) {
		LocalesEntity localesEntity = localesJpaRepository.findOne(id);
		return localesServiceMapper.mapLocalesEntityToLocales(localesEntity);
	}

	@Override
	public List<Locales> findAll() {
		Iterable<LocalesEntity> entities = localesJpaRepository.findAll();
		List<Locales> beans = new ArrayList<Locales>();
		for(LocalesEntity localesEntity : entities) {
			beans.add(localesServiceMapper.mapLocalesEntityToLocales(localesEntity));
		}
		return beans;
	}

	@Override
	public Locales save(Locales locales) {
		return update(locales) ;
	}

	@Override
	public Locales create(Locales locales) {
		LocalesEntity localesEntity;
		if(locales.getId() != null){
			localesEntity = localesJpaRepository.findOne(locales.getId());
			if( localesEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		localesEntity = new LocalesEntity();
		localesServiceMapper.mapLocalesToLocalesEntity(locales, localesEntity);
		LocalesEntity localesEntitySaved = localesJpaRepository.save(localesEntity);
		return localesServiceMapper.mapLocalesEntityToLocales(localesEntitySaved);
	}

	@Override
	public Locales update(Locales locales) {
		LocalesEntity localesEntity = localesJpaRepository.findOne(locales.getId());
		localesServiceMapper.mapLocalesToLocalesEntity(locales, localesEntity);
		LocalesEntity localesEntitySaved = localesJpaRepository.save(localesEntity);
		return localesServiceMapper.mapLocalesEntityToLocales(localesEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		localesJpaRepository.delete(id);
	}

	public LocalesJpaRepository getLocalesJpaRepository() {
		return localesJpaRepository;
	}

	public void setLocalesJpaRepository(LocalesJpaRepository localesJpaRepository) {
		this.localesJpaRepository = localesJpaRepository;
	}

	public LocalesServiceMapper getLocalesServiceMapper() {
		return localesServiceMapper;
	}

	public void setLocalesServiceMapper(LocalesServiceMapper localesServiceMapper) {
		this.localesServiceMapper = localesServiceMapper;
	}

	@Override
	public Page<LocalesEntity> findAll(Integer pageNumber) {
		// TODO Auto-generated method stub
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		return localesJpaRepository.findAll(request);
	}

	@Override
	public Page<LocalesEntity> findSearchAll(Integer pageNumber,
			Integer option, String keyword) {
		// TODO Auto-generated method stub
		String value = "%"+keyword+"%";//검색 조건
		PageRequest request =  new PageRequest(pageNumber - 1, BasicEnvironment.PAGE_SIZE, 
				 new Sort(new Order(Direction.DESC, "id")));
		
		switch (option) {
			case 1:
				return localesJpaRepository.findByLanguageLike(request ,value);
		}
		return null;
	}

}
