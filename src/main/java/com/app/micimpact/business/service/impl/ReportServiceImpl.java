/*
 * Created on 9 12ì›” 2015 ( Time 17:43:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.amazonaws.services.identitymanagement.model.ListRolePoliciesRequest;
import com.app.micimpact.bean.Comments;
import com.app.micimpact.bean.PageReport;
import com.app.micimpact.bean.Report;
import com.app.micimpact.bean.ReportComment;
import com.app.micimpact.bean.jpa.ReportEntity;
import java.util.Date;
import com.app.micimpact.business.service.ReportService;
import com.app.micimpact.business.service.mapping.ReportServiceMapper;
import com.app.micimpact.data.repository.jpa.ReportJpaRepository;
import com.app.micimpact.web.common.BasicEnvironment;
import com.app.micimpact.web.common.Utils;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ReportService
 */
@Component
@Transactional
public class ReportServiceImpl implements ReportService {

	@Resource 
	private ReportJpaRepository reportJpaRepository;

	@Resource
	private ReportServiceMapper reportServiceMapper;
	
	@Override
	public Report findById(Integer id) {
		ReportEntity reportEntity = reportJpaRepository.findOne(id);
		return reportServiceMapper.mapReportEntityToReport(reportEntity);
	}

	@Override
	public List<Report> findAll() {
		Iterable<ReportEntity> entities = reportJpaRepository.findAll();
		List<Report> beans = new ArrayList<Report>();
		for(ReportEntity reportEntity : entities) {
			beans.add(reportServiceMapper.mapReportEntityToReport(reportEntity));
		}
		return beans;
	}

	@Override
	public Report save(Report report) {
		return update(report) ;
	}

	@Override
	public Report create(Report report) {
		ReportEntity reportEntity;
		if(report.getId() != null){
			reportEntity = reportJpaRepository.findOne(report.getId());
			if( reportEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		reportEntity = new ReportEntity();
		reportServiceMapper.mapReportToReportEntity(report, reportEntity);
		ReportEntity reportEntitySaved = reportJpaRepository.save(reportEntity);
		return reportServiceMapper.mapReportEntityToReport(reportEntitySaved);
	}

	@Override
	public Report update(Report report) {
		ReportEntity reportEntity = reportJpaRepository.findOne(report.getId());
		reportServiceMapper.mapReportToReportEntity(report, reportEntity);
		ReportEntity reportEntitySaved = reportJpaRepository.save(reportEntity);
		return reportServiceMapper.mapReportEntityToReport(reportEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		reportJpaRepository.delete(id);
	}

	public ReportJpaRepository getReportJpaRepository() {
		return reportJpaRepository;
	}

	public void setReportJpaRepository(ReportJpaRepository reportJpaRepository) {
		this.reportJpaRepository = reportJpaRepository;
	}

	public ReportServiceMapper getReportServiceMapper() {
		return reportServiceMapper;
	}

	public void setReportServiceMapper(ReportServiceMapper reportServiceMapper) {
		this.reportServiceMapper = reportServiceMapper;
	}

	@Override
	public Page<ReportEntity> findAll(Integer page, Integer size) {
		try {
			PageRequest request =  new PageRequest(page - 1, BasicEnvironment.PAGE_SIZE, 
					 new Sort(new Order(Direction.DESC, "id")));
			return reportJpaRepository.findAll(request);
		} catch (Exception e) {
			return null;
		}
	}

	
	
	
	@Override
	public PageReport findReportComment(Integer page, Integer size) {
		int begin=0;
		int end=size;
		if(page>0){
			page =page-1;
			begin=page*size;
			end=page*size+size;
		}
		Iterable<Object[]> entities = reportJpaRepository.findReportComment(begin, end);
		List<ReportComment> beans = new ArrayList<ReportComment>();
		for(Object[] commentsEntity : entities) {
			ReportComment comment = new ReportComment();
			comment.setCommentId((Integer)commentsEntity[0]);
			comment.setName((String)commentsEntity[1]);
			comment.setBody((String)commentsEntity[2]);
			comment.setReport((Integer)commentsEntity[3]);
			comment.setIsShow((Integer)commentsEntity[4]);
			beans.add(comment);
		}
		 PageReport p =new PageReport();
		 p.setList(beans);
		 p.setCurrentIndex(page);
		 Integer count_all=reportJpaRepository.totalCommentPage();
		 Integer total_page=0;
		 total_page=count_all/size;
		 if(count_all%size!=0){
			 total_page=total_page+1;
		 }
		 p.setTotalPages(total_page);
		return p;
	}
	
	
	@Override
	public PageReport findReportCard(Integer page, Integer size) {
		int begin=0;
		int end=size;
		if(page>0){
			page =page-1;
			begin=page*size;
			end=page*size+size;
		}
		Iterable<Object[]> entities = reportJpaRepository.findReportCard(begin, end);
		List<ReportComment> beans = new ArrayList<ReportComment>();
		for(Object[] commentsEntity : entities) {
			ReportComment comment = new ReportComment();
			comment.setCommentId((Integer)commentsEntity[0]);
			comment.setName((String)commentsEntity[1]);
			comment.setBody((String)commentsEntity[2]);
			comment.setReport((Integer)commentsEntity[3]);
			comment.setIsShow((Integer)commentsEntity[4]);
			beans.add(comment);
		}
		 PageReport p =new PageReport();
		 p.setList(beans);
		 p.setCurrentIndex(page);
		 Integer count_all=reportJpaRepository.totalCardPage();
		 Integer total_page=0;
		 total_page=count_all/size;
		 if(count_all%size!=0){
			 total_page=total_page+1;
		 }
		 p.setTotalPages(total_page);
		return p;
	}

	}
