/*
 * Created on 21 Mar 2016 ( Time 16:47:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.ChannelLike;
import com.app.micimpact.bean.jpa.ChannelLikeEntity;
import java.util.Date;
import com.app.micimpact.business.service.ChannelLikeService;
import com.app.micimpact.business.service.mapping.ChannelLikeServiceMapper;
import com.app.micimpact.data.repository.jpa.ChannelLikeJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ChannelLikeService
 */
@Component
@Transactional
public class ChannelLikeServiceImpl implements ChannelLikeService {

	@Resource
	private ChannelLikeJpaRepository channelLikeJpaRepository;

	@Resource
	private ChannelLikeServiceMapper channelLikeServiceMapper;
	
	@Override
	public ChannelLike findById(Integer id) {
		ChannelLikeEntity channelLikeEntity = channelLikeJpaRepository.findOne(id);
		return channelLikeServiceMapper.mapChannelLikeEntityToChannelLike(channelLikeEntity);
	}

	@Override
	public List<ChannelLike> findAll() {
		Iterable<ChannelLikeEntity> entities = channelLikeJpaRepository.findAll();
		List<ChannelLike> beans = new ArrayList<ChannelLike>();
		for(ChannelLikeEntity channelLikeEntity : entities) {
			beans.add(channelLikeServiceMapper.mapChannelLikeEntityToChannelLike(channelLikeEntity));
		}
		return beans;
	}

	@Override
	public ChannelLike save(ChannelLike channelLike) {
		return update(channelLike) ;
	}

	@Override
	public ChannelLike create(ChannelLike channelLike) {
		ChannelLikeEntity channelLikeEntity;
		if(channelLike.getId() != null){
			channelLikeEntity = channelLikeJpaRepository.findOne(channelLike.getId());
			if( channelLikeEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		channelLikeEntity = new ChannelLikeEntity();
		channelLikeServiceMapper.mapChannelLikeToChannelLikeEntity(channelLike, channelLikeEntity);
		ChannelLikeEntity channelLikeEntitySaved = channelLikeJpaRepository.save(channelLikeEntity);
		return channelLikeServiceMapper.mapChannelLikeEntityToChannelLike(channelLikeEntitySaved);
	}

	@Override
	public ChannelLike update(ChannelLike channelLike) {
		ChannelLikeEntity channelLikeEntity = channelLikeJpaRepository.findOne(channelLike.getId());
		channelLikeServiceMapper.mapChannelLikeToChannelLikeEntity(channelLike, channelLikeEntity);
		ChannelLikeEntity channelLikeEntitySaved = channelLikeJpaRepository.save(channelLikeEntity);
		return channelLikeServiceMapper.mapChannelLikeEntityToChannelLike(channelLikeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		channelLikeJpaRepository.delete(id);
	}

	public ChannelLikeJpaRepository getChannelLikeJpaRepository() {
		return channelLikeJpaRepository;
	}

	public void setChannelLikeJpaRepository(ChannelLikeJpaRepository channelLikeJpaRepository) {
		this.channelLikeJpaRepository = channelLikeJpaRepository;
	}

	public ChannelLikeServiceMapper getChannelLikeServiceMapper() {
		return channelLikeServiceMapper;
	}

	public void setChannelLikeServiceMapper(ChannelLikeServiceMapper channelLikeServiceMapper) {
		this.channelLikeServiceMapper = channelLikeServiceMapper;
	}

	@Override
	public List<ChannelLikeEntity> findByUserIdAndChannelId(Integer userId,Integer channeId) {
		try {
			return channelLikeJpaRepository.findByUserIdAndChannelId(userId,channeId);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

	@Override
	public List<ChannelLikeEntity> findByUserId(Integer userId) {
		try {
			return channelLikeJpaRepository.findByUserId(userId);
		} catch (Exception e) {
			System.err.println(e);
			return null;
		}
	}

}
