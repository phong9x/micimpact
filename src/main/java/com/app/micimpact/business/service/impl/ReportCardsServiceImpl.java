/*
 * Created on 19 Apr 2016 ( Time 14:01:21 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.ReportCards;
import com.app.micimpact.bean.jpa.ReportCardsEntity;
import java.util.Date;
import com.app.micimpact.business.service.ReportCardsService;
import com.app.micimpact.business.service.mapping.ReportCardsServiceMapper;
import com.app.micimpact.data.repository.jpa.ReportCardsJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ReportCardsService
 */
@Component
@Transactional
public class ReportCardsServiceImpl implements ReportCardsService {

	@Resource
	private ReportCardsJpaRepository reportCardsJpaRepository;

	@Resource
	private ReportCardsServiceMapper reportCardsServiceMapper;
	
	@Override
	public ReportCards findById(Integer id) {
		ReportCardsEntity reportCardsEntity = reportCardsJpaRepository.findOne(id);
		return reportCardsServiceMapper.mapReportCardsEntityToReportCards(reportCardsEntity);
	}

	@Override
	public List<ReportCards> findAll() {
		Iterable<ReportCardsEntity> entities = reportCardsJpaRepository.findAll();
		List<ReportCards> beans = new ArrayList<ReportCards>();
		for(ReportCardsEntity reportCardsEntity : entities) {
			beans.add(reportCardsServiceMapper.mapReportCardsEntityToReportCards(reportCardsEntity));
		}
		return beans;
	}

	@Override
	public ReportCards save(ReportCards reportCards) {
		return update(reportCards) ;
	}

	@Override
	public ReportCards create(ReportCards reportCards) {
		ReportCardsEntity reportCardsEntity;
		if(reportCards.getId() != null){
			reportCardsEntity = reportCardsJpaRepository.findOne(reportCards.getId());
			if( reportCardsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		reportCardsEntity = new ReportCardsEntity();
		reportCardsServiceMapper.mapReportCardsToReportCardsEntity(reportCards, reportCardsEntity);
		ReportCardsEntity reportCardsEntitySaved = reportCardsJpaRepository.save(reportCardsEntity);
		return reportCardsServiceMapper.mapReportCardsEntityToReportCards(reportCardsEntitySaved);
	}

	@Override
	public ReportCards update(ReportCards reportCards) {
		ReportCardsEntity reportCardsEntity = reportCardsJpaRepository.findOne(reportCards.getId());
		reportCardsServiceMapper.mapReportCardsToReportCardsEntity(reportCards, reportCardsEntity);
		ReportCardsEntity reportCardsEntitySaved = reportCardsJpaRepository.save(reportCardsEntity);
		return reportCardsServiceMapper.mapReportCardsEntityToReportCards(reportCardsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		reportCardsJpaRepository.delete(id);
	}

	public ReportCardsJpaRepository getReportCardsJpaRepository() {
		return reportCardsJpaRepository;
	}

	public void setReportCardsJpaRepository(ReportCardsJpaRepository reportCardsJpaRepository) {
		this.reportCardsJpaRepository = reportCardsJpaRepository;
	}

	public ReportCardsServiceMapper getReportCardsServiceMapper() {
		return reportCardsServiceMapper;
	}

	public void setReportCardsServiceMapper(ReportCardsServiceMapper reportCardsServiceMapper) {
		this.reportCardsServiceMapper = reportCardsServiceMapper;
	}

}
