/*
 * Created on 21 Mar 2016 ( Time 16:47:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.ChannelFavorite;
import com.app.micimpact.bean.jpa.ChannelFavoriteEntity;
import java.util.Date;
import com.app.micimpact.business.service.ChannelFavoriteService;
import com.app.micimpact.business.service.mapping.ChannelFavoriteServiceMapper;
import com.app.micimpact.data.repository.jpa.ChannelFavoriteJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ChannelFavoriteService
 */
@Component
@Transactional
public class ChannelFavoriteServiceImpl implements ChannelFavoriteService {

	@Resource
	private ChannelFavoriteJpaRepository channelFavoriteJpaRepository;

	@Resource
	private ChannelFavoriteServiceMapper channelFavoriteServiceMapper;
	
	@Override
	public ChannelFavorite findById(Integer id) {
		ChannelFavoriteEntity channelFavoriteEntity = channelFavoriteJpaRepository.findOne(id);
		return channelFavoriteServiceMapper.mapChannelFavoriteEntityToChannelFavorite(channelFavoriteEntity);
	}

	@Override
	public List<ChannelFavorite> findAll() {
		Iterable<ChannelFavoriteEntity> entities = channelFavoriteJpaRepository.findAll();
		List<ChannelFavorite> beans = new ArrayList<ChannelFavorite>();
		for(ChannelFavoriteEntity channelFavoriteEntity : entities) {
			beans.add(channelFavoriteServiceMapper.mapChannelFavoriteEntityToChannelFavorite(channelFavoriteEntity));
		}
		return beans;
	}

	@Override
	public ChannelFavorite save(ChannelFavorite channelFavorite) {
		return update(channelFavorite) ;
	}

	@Override
	public ChannelFavorite create(ChannelFavorite channelFavorite) {
		ChannelFavoriteEntity channelFavoriteEntity;
		if(channelFavorite.getId() != null){
			channelFavoriteEntity = channelFavoriteJpaRepository.findOne(channelFavorite.getId());
			if( channelFavoriteEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		channelFavoriteEntity = new ChannelFavoriteEntity();
		channelFavoriteServiceMapper.mapChannelFavoriteToChannelFavoriteEntity(channelFavorite, channelFavoriteEntity);
		ChannelFavoriteEntity channelFavoriteEntitySaved = channelFavoriteJpaRepository.save(channelFavoriteEntity);
		return channelFavoriteServiceMapper.mapChannelFavoriteEntityToChannelFavorite(channelFavoriteEntitySaved);
	}

	@Override
	public ChannelFavorite update(ChannelFavorite channelFavorite) {
		ChannelFavoriteEntity channelFavoriteEntity = channelFavoriteJpaRepository.findOne(channelFavorite.getId());
		channelFavoriteServiceMapper.mapChannelFavoriteToChannelFavoriteEntity(channelFavorite, channelFavoriteEntity);
		ChannelFavoriteEntity channelFavoriteEntitySaved = channelFavoriteJpaRepository.save(channelFavoriteEntity);
		return channelFavoriteServiceMapper.mapChannelFavoriteEntityToChannelFavorite(channelFavoriteEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		channelFavoriteJpaRepository.delete(id);
	}

	public ChannelFavoriteJpaRepository getChannelFavoriteJpaRepository() {
		return channelFavoriteJpaRepository;
	}

	public void setChannelFavoriteJpaRepository(ChannelFavoriteJpaRepository channelFavoriteJpaRepository) {
		this.channelFavoriteJpaRepository = channelFavoriteJpaRepository;
	}

	public ChannelFavoriteServiceMapper getChannelFavoriteServiceMapper() {
		return channelFavoriteServiceMapper;
	}

	public void setChannelFavoriteServiceMapper(ChannelFavoriteServiceMapper channelFavoriteServiceMapper) {
		this.channelFavoriteServiceMapper = channelFavoriteServiceMapper;
	}

	@Override
	public List<ChannelFavoriteEntity> findByUserIdAndChannelId(Integer userId, Integer channeId) {
		try {
			return channelFavoriteJpaRepository.findByUserIdAndChannelId(userId, channeId);
		} catch (Exception e) {
			return null;
		}
	}

}
