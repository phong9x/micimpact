/*
 * Created on 21 12ì›” 2015 ( Time 19:49:29 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import com.app.micimpact.bean.CardTags;
import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Images;
import com.app.micimpact.bean.jpa.CardTagsEntity;
import com.app.micimpact.bean.jpa.ImagesEntity;
import com.app.micimpact.business.service.CardTagsService;
import com.app.micimpact.business.service.mapping.CardTagsServiceMapper;
import com.app.micimpact.data.repository.jpa.CardTagsJpaRepository;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CardTagsService
 */
@Component
@Transactional
public class CardTagsServiceImpl implements CardTagsService {

	@Resource
	private CardTagsJpaRepository cardTagsJpaRepository;

	@Resource
	private CardTagsServiceMapper cardTagsServiceMapper;
	
	@Override
	public CardTags findById(Integer id) {
		CardTagsEntity cardTagsEntity = cardTagsJpaRepository.findOne(id);
		return cardTagsServiceMapper.mapCardTagsEntityToCardTags(cardTagsEntity);
	}

	@Override
	public List<CardTags> findAll() {
		Iterable<CardTagsEntity> entities = cardTagsJpaRepository.findAll();
		List<CardTags> beans = new ArrayList<CardTags>();
		for(CardTagsEntity cardTagsEntity : entities) {
			beans.add(cardTagsServiceMapper.mapCardTagsEntityToCardTags(cardTagsEntity));
		}
		return beans;
	}

	@Override
	public CardTags save(CardTags cardTags) {
		return update(cardTags) ;
	}

	@Override
	public CardTags create(CardTags cardTags) {
		CardTagsEntity cardTagsEntity;
		if(cardTags.getId() != null){
			cardTagsEntity = cardTagsJpaRepository.findOne(cardTags.getId());
			if( cardTagsEntity != null ) {
				throw new IllegalStateException("already.exists");
			}
		}
		cardTagsEntity = new CardTagsEntity();
		cardTagsServiceMapper.mapCardTagsToCardTagsEntity(cardTags, cardTagsEntity);
		CardTagsEntity cardTagsEntitySaved = cardTagsJpaRepository.save(cardTagsEntity);
		return cardTagsServiceMapper.mapCardTagsEntityToCardTags(cardTagsEntitySaved);
	}

	@Override
	public CardTags update(CardTags cardTags) {
		//cardTags == form
		
		// entity
		CardTagsEntity cardTagsEntity = cardTagsJpaRepository.findOne(cardTags.getId());
		System.out.println("before");
		System.out.println(cardTagsEntity);
		
		// set entity by form
		cardTagsServiceMapper.mapCardTagsToCardTagsEntity(cardTags, cardTagsEntity);
		
		System.out.println("after");
		System.out.println(cardTags);
		System.out.println(cardTagsEntity);
		
		CardTagsEntity cardTagsEntitySaved = cardTagsJpaRepository.save(cardTagsEntity);
		return cardTagsServiceMapper.mapCardTagsEntityToCardTags(cardTagsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		cardTagsJpaRepository.delete(id);
	}

	public CardTagsJpaRepository getCardTagsJpaRepository() {
		return cardTagsJpaRepository;
	}

	public void setCardTagsJpaRepository(CardTagsJpaRepository cardTagsJpaRepository) {
		this.cardTagsJpaRepository = cardTagsJpaRepository;
	}

	public CardTagsServiceMapper getCardTagsServiceMapper() {
		return cardTagsServiceMapper;
	}

	public void setCardTagsServiceMapper(CardTagsServiceMapper cardTagsServiceMapper) {
		this.cardTagsServiceMapper = cardTagsServiceMapper;
	}

	public List<CardTags> findByCardIdIn(Integer card_ids[])
	{
		Iterable<CardTagsEntity> entities = cardTagsJpaRepository.findByCardIdIn(card_ids);
		List<CardTags> beans = new ArrayList<CardTags>();
		for(CardTagsEntity cardTagsEntity : entities) {
			beans.add(cardTagsServiceMapper.mapCardTagsEntityToCardTags(cardTagsEntity));
		}
		return beans;
	}

	public void deleteByCardId(Integer card_id)
	{
		cardTagsJpaRepository.deleteByCardId(card_id);
	}

	@Override
	public void deleteByChannelId(Integer channel_id) {
		cardTagsJpaRepository.deleteByChannelId(channel_id);
		
	}
}
