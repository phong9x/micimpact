/*
 * Created on 28 Apr 2015 ( Time 15:46:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.springframework.data.domain.Page;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.view.RedirectView;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.app.micimpact.bean.FileTransfer;
import com.app.micimpact.bean.Postings;
import com.app.micimpact.bean.UploadFiles;
import com.app.micimpact.bean.Users;
import com.app.micimpact.bean.jpa.PostingsEntity;
import com.app.micimpact.business.service.PostingsService;
import com.app.micimpact.business.service.UploadFilesService;
import com.app.micimpact.business.service.mapping.PostingsServiceMapper;
//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.BasicEnvironment;
//--- Services 
//--- Entities
//--- List Items 
import com.app.micimpact.web.common.Pager;


@Controller
@Secured("ROLE_ADMIN")
@RequestMapping("/admin/manage_boards")
public class AdminBoardsController extends AbstractController {

	private static final String MAIN_ENTITY_NAME = "posting";

	private static final String JSP_WRITE   = "admin/board/write";
	private static final String JSP_MODIFY   = "admin/board/modify";
	private static final String JSP_CONTENTS   = "admin/board/contents";
	private static final String JSP_LIST   = "admin/board/list";
	
	public static final String DOMAIN_NOTICE = "notice";
	public static final String DOMAIN_FREE_BOARD = "free_board";

	private static final int FREE_BOARD_TYPE_ID   = 2;
	private static final int NOTICE_TYPE_ID   = 1;
	private static final int NOTICE_COMMENT_ID = 19;
	private static final int FREE_BOARD_COMMENT_ID = 29;
	private static final int NOMAL_NOTICE_ID   = 11;
	private static final int IMPORTANT_NOTICE_ID   = 12;
	private static final int FREE_BOARD_ID   = 21;
	
	private static final String BOARDS_URL   = "/admin/manage_boards";
	
	@Resource
	private PostingsService postingsService;
	
	@Resource
	private UploadFilesService uploadFilesService;
	
	@Resource
	private PostingsServiceMapper postingsServiceMapper;
	
	@Resource
	private UploadFilesController uploadFilesController;
	
	public AdminBoardsController() {
		super(AdminBoardsController.class, MAIN_ENTITY_NAME );
		log("AdminBoardsController created.");
	}
	
	@RequestMapping()
	public String noticeListPage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber,
			@RequestParam(value="bType") Integer boardType) {
		log("Action 'noticeListPage'"+ pageNumber);
		List<Integer> postingTypes = new ArrayList<Integer>();
		postingTypes.add(NOTICE_TYPE_ID);
		
		Page<PostingsEntity> postings = postingsService.findAll(pageNumber, postingTypes);
		new Pager<PostingsEntity>(postings, model).pageSetting(BOARDS_URL);
		model.addAttribute("bType", boardType);
		return JSP_LIST;
	}
	
	@RequestMapping("/{id}")
	public String boardContentsPage(
			Model model,
			@PathVariable("id") int postingId) {
		log("Action 'Board Contents Page'");
		Postings posting = postingsService.findById(postingId);	
		PostingsEntity postingEntity = new PostingsEntity();
		postingsServiceMapper.mapPostingsToPostingsEntity(posting, postingEntity);
		model.addAttribute("posting", postingEntity);
		int postingTypeId = posting.getTypeId();
//		String domain;
//		int commnetId;
//		int boardType=NOTICE_TYPE_ID;
//		List<UploadFiles> uploadFiles = uploadFilesService.findByOwnerAndDomain(posting.getId(), domain);
//		model.addAttribute("uploadFiles", uploadFiles);
		
//		Postings comment = new Postings();
//		comment.setTypeId(commnetId);
//		comment.setParentId(postingId);
//		model.addAttribute("comment", comment);
		
//		List<PostingsEntity> comments = postingsService.findByParentIdAndPostingTypes(postingId, commnetId);
//		model.addAttribute("comments", comments);
		model.addAttribute("url", BOARDS_URL);
		model.addAttribute("bType", postingTypeId);
		
		return JSP_CONTENTS;
	}
	
	@RequestMapping("/comment/create")
	public RedirectView noticeCommentCreate(
			Model model,
			Postings posting) {
		log("Action 'noticeCommentCreate'");
		
		posting.setCreatedAt(new Date());
		Users user = (Users)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		int userId = user.getId();
		posting.setUserId(userId);
		log("Action 'noticeCommentCreate'"+posting.toString());
		
		//-------------------------
		postingsService.create(posting);
		
		String path = BOARDS_URL+"/"+posting.getParentId().toString();
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}
	
	
	@RequestMapping("/write")
	public String noticeWritePage(Model model,
			@RequestParam(value="bType") Integer boardType) {
		log("Action 'noticeWritePage'");
		Postings posting = new Postings();
		FileTransfer fileTransfer = new FileTransfer();
		if(boardType == FREE_BOARD_TYPE_ID){
			posting.setTypeId(FREE_BOARD_ID);
		}
		model.addAttribute("posting", posting);
		model.addAttribute("fileTransfer", fileTransfer);
		model.addAttribute("url", BOARDS_URL);
		model.addAttribute("bType", boardType);
		return JSP_WRITE;
	}
	
	@RequestMapping("/modify/{id}")
	public String noticeModifyPage(
			Model model,
			@PathVariable("id") int postingId) {
		log("Action 'noticeModifyPage'");
		Postings posting = postingsService.findById(postingId);	
		model.addAttribute("posting", posting);
		
//		FileTransfer fileTransfer = new FileTransfer();
//		model.addAttribute("fileTransfer", fileTransfer);
//		int boardType;
//		String domain;
//		if(posting.getTypeId()/10 == 1){
//			boardType = NOTICE_TYPE_ID;
//			domain= DOMAIN_NOTICE;
//		}else{
//			boardType = FREE_BOARD_TYPE_ID;
//			domain = DOMAIN_FREE_BOARD;
//		}
		
//		List<UploadFiles> uploadFiles = uploadFilesService.findByOwnerAndDomain(posting.getId(), domain);
//		
//		model.addAttribute("uploadFiles", uploadFiles);
		model.addAttribute("url", BOARDS_URL);
		
		model.addAttribute("bType", posting.getTypeId());
		
		return JSP_MODIFY;
	}
	
	@RequestMapping("/reply/{id}")
	public String noticeReplyPage(
			Model model,
			@PathVariable("id") int postingId,
			@RequestParam(value="type") Integer typeId) {
		log("Action 'noticeReplyPage'");
		Postings posting = new Postings();
		posting.setParentId(postingId);
		posting.setTypeId(typeId);
		model.addAttribute("posting", posting);
		model.addAttribute("url", BOARDS_URL);
		return JSP_WRITE;
	}
	
	
	@RequestMapping(value="/create",
			method= RequestMethod.POST,
			produces="text/plain;charset=UTF-8")
	@ResponseBody
	public String boardCreate(
			HttpServletResponse response,
			Model model,
			Postings posting) throws JsonProcessingException {
		log("Action 'boardCreate'");
		posting.setCreatedAt(new Date());
		Users user = (Users)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		int userId = user.getId();
		posting.setUserId(userId);
		posting.setTypeId(1);
		posting.setUpdatedAt(new Date());
		Postings createdPosting =postingsService.create(posting);
		
		HashMap<String, Object> responseMap = new HashMap<String, Object>();
		if(createdPosting !=null){
			responseMap.put("success", "true"); 
			responseMap.put("message", createdPosting.getId());
			responseMap.put("url", BOARDS_URL);
			responseMap.put("bType", 1);
			if (createdPosting.getParentId() == null)
			{
				createdPosting.setParentId(createdPosting.getId());
				postingsService.save(createdPosting);
			}
		}else {
			responseMap.put("success", "false"); 
			responseMap.put("message", "게시글 등록이 실패하였습니다.");
		} 
		ObjectMapper mapper = new ObjectMapper();
		
		return mapper.writeValueAsString(responseMap);
	}

	@RequestMapping("/delete/{id}")
	public RedirectView noticeDelete(
			Model model,
			@PathVariable("id") int postingId,
			@RequestParam(value="parentId", defaultValue="0") Integer parentId,
			@RequestParam(value="bType") Integer boardType) {
		log("Action 'noticeDelete'");
		postingsService.delete(postingId);
		
		String path = null;
		if(parentId != 0){
			path = BOARDS_URL+ "/" + parentId;
		}else{
			path = BOARDS_URL+"?bType="+ boardType;			
		}
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}
	
	@RequestMapping(value="/update/{id}",
			method = RequestMethod.POST,
			produces="text/plain;charset=UTF-8")
	@ResponseBody
	public String noticeUpdate(
			Model model,
			HttpServletResponse response,
			@PathVariable("id") int postingId,
			@RequestParam(value="delete", defaultValue="") String delList,
			Postings posting) throws JsonProcessingException {
		log("Action 'noticeUpdate'"+delList+"|");
		
		Postings updatedPosting = postingsService.findById(postingId);
		HashMap<String, Object> responseMap = new HashMap<String, Object>();
		
		updatedPosting.setBody(posting.getBody());
		updatedPosting.setTitle(posting.getTitle());
		updatedPosting.setTypeId(posting.getTypeId());
		updatedPosting.setUpdatedAt(new Date());
		
		updatedPosting = postingsService.update(updatedPosting);
		
		if(delList != "" && delList != null){	
			List<Integer> ids = new ArrayList<Integer>();
			if(delList.contains(",")){
				String[] splitDelList = delList.split(",");
				for(int i = 0 ; i < splitDelList.length ; i++){
					ids.add(Integer.parseInt(splitDelList[i]));
				}
			}else{
				ids.add(Integer.parseInt(delList));
			}
			List<UploadFiles> postingDatas = uploadFilesService.findByIdIn(ids);
			uploadFilesController.deleteFiles(postingDatas);
		}
		
		
		if(updatedPosting !=null){
			responseMap.put("success", "true"); 
			responseMap.put("message", updatedPosting.getId());
			responseMap.put("url", BOARDS_URL);
			int postingTypeId = posting.getTypeId();
			int boardType;
			if(postingTypeId/10 == 1){
				boardType = NOTICE_TYPE_ID;
			}else{
				boardType = FREE_BOARD_TYPE_ID;
			}
			responseMap.put("bType", boardType);
		}else {
			responseMap.put("success", "false"); 
			responseMap.put("message", "게시글 수정이 실패하였습니다.");
		} 
		ObjectMapper mapper = new ObjectMapper();
		
		return mapper.writeValueAsString(responseMap);
	}

	
}
