/*
 * Created on 9 Mar 2016 ( Time 11:20:33 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.web.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.FormMode;
import com.app.micimpact.web.common.Login;
import com.app.micimpact.web.common.Message;
import com.app.micimpact.web.common.MessageType;
import com.app.micimpact.web.common.Pager;
import com.app.micimpact.web.listitem.CategoriesListItem;
import com.restfb.types.User;
import com.app.micimpact.bean.CardTags;
import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Categories;
//--- Entities
import com.app.micimpact.bean.Channel;
import com.app.micimpact.bean.Users;
import com.app.micimpact.bean.jpa.CardsEntity;
import com.app.micimpact.bean.jpa.ChannelEntity;
import com.app.micimpact.bean.jpa.UsersEntity;
import com.app.micimpact.business.service.CardTagsService;
import com.app.micimpact.business.service.CardsService;
import com.app.micimpact.business.service.CategoriesService;
//--- Services 
import com.app.micimpact.business.service.ChannelService;


/**
 * Spring MVC controller for 'Channel' management.
 */
@Controller
@RequestMapping("/admin")
public class AdminChannelController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "channel";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "channel/form";
	private static final String JSP_LIST   = "channel/list";
	private static final String JSP_ADMIN_LIST   = "admin/admin_chanels";
	private static final String JSP_USER_CHANNEL_LIST   = "admin/user/channel";
	private static final String JSP_EDIT_CHANNEL_LIST   = "admin/channel/edit";
	private static final String JSP_ADMIN_EDIT_CHANNEL_LIST   = "admin/admin_chanels/edit";
	private static final String JSP_ADMIN_CHANNEL_MAKE   = "admin/admin_channel/make";
	private static final String JSP_CARD_FORM   = "admin/cards/cards_form.tiles";
	//--- SAVE ACTION ( in the HTML form )	
	private static final String SAVE_ACTION_CREATE   = "/channel/create";
	private static final String SAVE_ACTION_UPDATE   = "/channel/update";
	private static final String CARDS_DETAIL_URL   = "/admin/channel/add_card";
	
	@Value("#{commonConfig['s3.card_image.path']}")
	protected String card_image_path;

	@Value("#{commonConfig['s3.thumbnail.path']}")
	protected String thumbnail_path;

	@Value("#{commonConfig['s3.vertical_thumbnail.path']}")
	protected String vertical_thumbnail_path;
	//--- Main entity service
	@Resource
    private ChannelService channelService; // Injected by Spring
	@Resource
    private CardsService cardsService;
	//--- Other service(s)
	@Resource
    private CardTagsService cardTagsService; // Injected by Spring
	@Resource
    private CategoriesService categoriesService;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public AdminChannelController() {
		super(AdminChannelController.class, MAIN_ENTITY_NAME );
		log("ChannelController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param channel
	 */
	private void populateModel(Model model, Channel channel, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, channel);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Channel found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	
	@RequestMapping("/manage_chanels")
	public String list(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="delete_channel", defaultValue="") Integer[] delete_channel,
			@RequestParam(value="delete", defaultValue="0") Integer delete,
			Model model) {
		if(delete>0){
			for (Integer id : delete_channel) {
				channelService.delete(id);
				cardsService.deleteByChannelId(id);
				cardTagsService.deleteByChannelId(id);
			}
		}
		Page<ChannelEntity> list = channelService.findChannelByType(0, page, 10);
		model.addAttribute(MAIN_LIST_NAME, list);
		String path = "/admin/manage_chanels";
		new Pager<ChannelEntity>(list, model).pageSetting(path);
		return JSP_LIST;
	}
	
	@RequestMapping("/admin_chanels")
	public String admin_list(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="delete_channel", defaultValue="") Integer[] delete_channel,
			@RequestParam(value="delete", defaultValue="0") Integer delete,
			Model model) {
		if(delete>0){
			for (Integer id : delete_channel) {
				channelService.delete(id);
				cardsService.deleteByChannelId(id);
				cardTagsService.deleteByChannelId(id);
			}
		}
		Page<ChannelEntity> list = channelService.findChannelByType(1, page, 10);
		model.addAttribute(MAIN_LIST_NAME, list);
		String path = "/admin/admin_chanels";
		new Pager<ChannelEntity>(list, model).pageSetting(path);
		return JSP_ADMIN_LIST;
	}
	
	@RequestMapping(value="/user/channel/{id}",method = RequestMethod.GET)
	public String channel_get(
			@RequestParam(value="page", defaultValue="1") Integer page,
			RedirectAttributes redirectAttributes, 
			@RequestParam(value="delete_channel", defaultValue="") Integer[] delete_channel,
			@RequestParam(value="delete", defaultValue="0") Integer delete,
			@PathVariable("id") Integer id,
			Model model) {
		Page<ChannelEntity> list = channelService.getBy_UserId(id, page, 10);
		model.addAttribute(MAIN_LIST_NAME, list);
		model.addAttribute("user_id", id);
		String path = "/admin/user/channel/"+id;
		new Pager<ChannelEntity>(list, model).pageSetting(path);
		return JSP_USER_CHANNEL_LIST;
	}
	
	
	@RequestMapping(value="/user/channel/{id}",method = RequestMethod.POST)
	public String user_list(
			@RequestParam(value="page", defaultValue="1") Integer page,
			RedirectAttributes redirectAttributes, 
			@RequestParam(value="delete_channel", defaultValue="") Integer[] delete_channel,
			@RequestParam(value="delete", defaultValue="0") Integer delete,
			@PathVariable("id") Integer id,
			Model model) {
		if(delete_channel!=null){
			try {
				for (Integer d : delete_channel) {
					channelService.delete(d);
					cardsService.deleteByChannelId(d);
					cardTagsService.deleteByChannelId(d);
				}
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
			} catch(Exception e) {
				messageHelper.addException(redirectAttributes, "channel.error.delete", e);
				System.out.println(e);
			}
			
		}
		
		return "redirect:/admin/user/channel/"+id;
	}
	
	
	
	@RequestMapping("/admin_chanels/add/{id}")
	public String admin_channel_add(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="title", defaultValue="") String title,
			@RequestParam(value="introduce", defaultValue="") String introduce,
			@RequestParam(value="add", defaultValue="0") Integer add,
			@RequestParam(value="search", defaultValue="0") Integer search,
			@RequestParam(value="order", defaultValue="title") String  order,
			@RequestParam(value="keyword", defaultValue="") String  key,
			@RequestParam(value="opition", defaultValue="0") Integer  opition,
			@RequestParam(value="delete_card", defaultValue="0") Integer  delete_card,
			@PathVariable("id") Integer id,HttpSession session,
			Model model) {
		Channel c =channelService.findById(id);
		if(add>0 && title!=null && introduce!=null){
			c.setTitle(title);
			c.setIntroduce(introduce);
			c=channelService.update(c);
		}
		if(delete_card>0){
			cardsService.delete(delete_card);
			cardTagsService.deleteByChannelId(delete_card);
		}
		if (key==null && opition==0) {
			key="";
		}
		Page<CardsEntity> list = cardsService.findByChannelId_Search("%"+key+"%",id, page, 10, order);
		model.addAttribute(MAIN_LIST_NAME, list);
		model.addAttribute("order", order);
		model.addAttribute("key", key);
		model.addAttribute("opition", opition);
		model.addAttribute("c", c);
		String path = "/admin/admin_channels/edit/"+id+"?page="+ page + "&option="+opition+ "&keyword="+key+ "&order="+order;
		new Pager<CardsEntity>(list, model).pageSetting(path);
		return JSP_ADMIN_EDIT_CHANNEL_LIST;
	}
	
	
	
	
	
	
	@RequestMapping("/admin_chanels/edit/{id}")
	public String admin_channel_edit(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="title", defaultValue="") String title,
			@RequestParam(value="introduce", defaultValue="") String introduce,
			@RequestParam(value="edit", defaultValue="0") Integer edit,
			@RequestParam(value="search", defaultValue="0") Integer search,
			@RequestParam(value="order", defaultValue="title") String  order,
			@RequestParam(value="keyword", defaultValue="") String  key,
			@RequestParam(value="opition", defaultValue="0") Integer  opition,
			@RequestParam(value="delete_card", defaultValue="0") Integer  delete_card,
			@RequestParam(value="create", defaultValue="0") Integer  create,
			@PathVariable("id") Integer id,
			RedirectAttributes redirectAttributes, 
			Model model) {
		Channel c =channelService.findById(id);
		if(edit>0 && title!=null ){
			c.setTitle(title);
			c.setIntroduce(introduce);
			c=channelService.update(c);	
			return "redirect:/admin/admin_chanels";
		}
		if(delete_card>0){
			Channel channel =channelService.findById(id);
			channel.setCardsRecentId(null);
			channelService.update(channel);
			cardsService.delete(delete_card);
		}
		if (key==null && opition==0) {
			key="";
		}
		if(create==1){
			model.addAttribute("create", 1);
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"create.ok"));	
		}
		Page<CardsEntity> list = cardsService.findByChannelId_Search("%"+key+"%",id, page, 10, order);
		model.addAttribute(MAIN_LIST_NAME, list);
		model.addAttribute("order", order);
		model.addAttribute("key", key);
		model.addAttribute("opition", opition);
		model.addAttribute("c", c);
		String path = "/admin/admin_channels/edit/"+id+"?page="+ page + "&option="+opition+ "&keyword="+key+ "&order="+order;
		new Pager<CardsEntity>(list, model).pageSetting(path);
		return JSP_ADMIN_EDIT_CHANNEL_LIST;
	}
	
	
	@RequestMapping("/channel/edit/{id}")
	public String channel_edit(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="title", defaultValue="") String title,
			@RequestParam(value="introduce", defaultValue="") String introduce,
			@RequestParam(value="edit", defaultValue="0") Integer edit,
			@RequestParam(value="search", defaultValue="0") Integer search,
			@RequestParam(value="order", defaultValue="title") String  order,
			@RequestParam(value="keyword", defaultValue="") String  key,
			@RequestParam(value="opition", defaultValue="0") Integer  opition,
			@PathVariable("id") Integer id,
			Model model) {
		Channel c =channelService.findById(id);
		if(edit>0 && title!=null ){
			c.setTitle(title);
			c.setIntroduce(introduce);
			c=channelService.update(c);
			return "redirect:/admin/manage_chanels";
		}
		
		if (key==null && opition==0) {
			key="";
		}
		
		Page<CardsEntity> list = cardsService.findByChannelId_Search("%"+key+"%",id, page, 10, order);
		model.addAttribute(MAIN_LIST_NAME, list);
		model.addAttribute("order", order);
		model.addAttribute("key", key);
		model.addAttribute("opition", opition);
		model.addAttribute("c", c);
		String path = "/admin/channel/edit/"+id+"?page="+ page + "&option="+opition+ "&keyword="+key+ "&order="+order;
		new Pager<CardsEntity>(list, model).pageSetting(path);
		return JSP_EDIT_CHANNEL_LIST;
	}
	
	
	
	
	@RequestMapping(value = "/user/channel/delete/{user_id}/{channel_id}") // GET or POST
	public String delete_user_channel(RedirectAttributes redirectAttributes, 
			@PathVariable("user_id") Integer user_id,
			@PathVariable("channel_id") Integer channel_id) {
		log("Action 'delete'" );
		
		try {
			channelService.delete(channel_id);
			cardsService.deleteByChannelId(channel_id);
			cardTagsService.deleteByChannelId(channel_id);
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "channel.error.delete", e);
		}
		return "redirect:/admin/user/channel/"+user_id;
	}
	
	
	@RequestMapping(value = "/manage_chanels/card/delete/{channel_id}/{card_id}") // GET or POST
	public String delete_card(RedirectAttributes redirectAttributes, 
			@PathVariable("channel_id") Integer channel_id,
			@PathVariable("card_id") Integer card_id
			) {
		log("Action 'delete'" );
		try {
			cardsService.delete(card_id);
			cardTagsService.deleteByCardId(card_id);			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "card.error.delete", e);
		}
		return "redirect:/admin/channel/edit/"+channel_id;
	}
	
	
	@RequestMapping(value="/{id}")
	public String manageUsersDetailPage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer page,
			@PathVariable("id") Integer id ) {		

		Channel channel = channelService.findById(id);
		Page<CardsEntity> list = cardsService.findByChannelId(channel.getId(), page,10);
		model.addAttribute(MAIN_LIST_NAME, list);
		String path = "/admin/manage_chanel";
		new Pager<CardsEntity>(list, model).pageSetting(path);
		model.addAttribute("c", channel);
		return JSP_FORM;
	}

	@RequestMapping(value = "/manage_chanels/delete/{id}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
		log("Action 'delete'" );
		try {
			channelService.delete(id);
			cardsService.deleteByChannelId(id);
			cardTagsService.deleteByChannelId(id);
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "channel.error.delete", e);
		}
		return "redirect:/admin/manage_chanels";
	}
	
	@RequestMapping(value = "/admin_chanels/delete/{id}") // GET or POST
	public String delete2(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
		log("Action 'delete'" );
		try {
			channelService.delete(id);
			cardsService.deleteByChannelId(id);
			cardTagsService.deleteByChannelId(id);
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "channel.error.delete", e);
		}
		return "redirect:/admin/admin_chanels";
	}

	@RequestMapping("/admin_channel/make")
	public String channel_make(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="title", defaultValue="") String title,
			@RequestParam(value="introduce", defaultValue="") String introduce,
			@RequestParam(value="edit", defaultValue="0") Integer edit,
			@RequestParam(value="search", defaultValue="0") Integer search,
			@RequestParam(value="order", defaultValue="title") String  order,
			@RequestParam(value="keyword", defaultValue="") String  key,
			@RequestParam(value="opition", defaultValue="0") Integer  opition,
			Model model,HttpSession session) {
		
		if(edit>0 && title!=null && introduce!=null){
			Channel c =new Channel();
			c.setTitle(title);
			c.setIntroduce(introduce);
			c.setCreatedAt(new Date());
			c.setFavorite(0);
			c.setIsLiked(0);
			c.setIsShow(1);
			c.setLikes(0);
			c.setType(1);
			Users admin=Login.getAdminLogin(session);
			c.setUserId(admin.getId());
			Channel sucess=channelService.create(c);
			if(sucess!=null){
				return "redirect:/admin/admin_chanels/edit/"+sucess.getId()+"?create=1";
			}
		}
		if (key==null && opition==0) {
			key="";
		}
		
		
		return JSP_ADMIN_CHANNEL_MAKE;
	}
	
	

}
