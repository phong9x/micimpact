/*
 * Created on 9 12월 2015 ( Time 16:26:40 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.web.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.app.micimpact.bean.CardTags;
//--- Entities
import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Categories;
import com.app.micimpact.bean.Channel;
import com.app.micimpact.bean.FileTransfer;
import com.app.micimpact.bean.Images;
import com.app.micimpact.bean.MainList;
import com.app.micimpact.bean.Users;
import com.app.micimpact.bean.jpa.CardsEntity;
import com.app.micimpact.business.service.CardTagsService;
//--- Services 
import com.app.micimpact.business.service.CardsService;
import com.app.micimpact.business.service.CategoriesService;
import com.app.micimpact.business.service.ChannelService;
import com.app.micimpact.business.service.ImagesService;
//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.AmazonS3FileManager;
import com.app.micimpact.web.common.FormMode;
import com.app.micimpact.web.common.Login;
import com.app.micimpact.web.common.Message;
import com.app.micimpact.web.common.MessageType;
import com.app.micimpact.web.common.Pager;
import com.app.micimpact.web.common.Utils;
import com.app.micimpact.web.listitem.CategoriesListItem;


/**
 * Spring MVC controller for 'Cards' management.
 */
@Controller
@RequestMapping("/admin/channel/card")
public class AdminCardsChannelController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "cards";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "admin/cards/cards_form.tiles";
	private static final String JSP_LIST   = "admin/cards/cards_list.tiles";
	private static final String JSP_POPUP_SEARCH_CARD	= "admin/search_popup/popup_cards_list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/admin/channel/card/create";
	private static final String SAVE_ACTION_UPDATE   = "/admin/channel/card/update";

	private static final String CARDS_DETAIL_URL   = "admin/channel/card/form";

	@Value("#{commonConfig['s3.card_image.path']}")
	protected String card_image_path;

	@Value("#{commonConfig['s3.thumbnail.path']}")
	protected String thumbnail_path;

	@Value("#{commonConfig['s3.vertical_thumbnail.path']}")
	protected String vertical_thumbnail_path;
	
	//--- Main entity service
	@Resource
    private CardsService cardsService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private CategoriesService categoriesService;
	
	@Resource
    private ImagesService imagesService;
	
	@Resource
	private ImagesController imagesController;
	
	@Autowired
	private AmazonS3FileManager amazonS3FileManager;

	@Resource
    private CardTagsService cardTagsService; // Injected by Spring
	
	@Resource
    private ChannelService channelService; // Injected by Spring
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public AdminCardsChannelController() {
		super(AdminCardsChannelController.class, MAIN_ENTITY_NAME );
		log("AdminCardsChannelController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	private void populateListOfCardCategoriesItems(Model model) {
		List<Categories> list = categoriesService.findAll();
		List<CategoriesListItem> items = new LinkedList<CategoriesListItem>();
		for ( Categories categories : list ) {
			items.add(new CategoriesListItem( categories ) );
		}
		model.addAttribute("listOfCategoriesListItem", items ) ;
	}
	
	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param cards
	 */
	private void populateModel(Model model, Cards cards, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, cards);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfCardCategoriesItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfCardCategoriesItems(model);
			populateListOfCardTags(cards, model);
		}
	}

	private void populateListOfCardTags(Cards cards, Model model) {
	
		StringBuffer sb_tags = new StringBuffer();
		Integer[] card_ids = new Integer[1];
		card_ids[0]=cards.getId();
		List<CardTags> tags = cardTagsService.findByCardIdIn(card_ids);
		for (CardTags tag : tags)
		{
			sb_tags.append(tag.getName());
			sb_tags.append(", ");
		}
		
		if (sb_tags.length() > 0)
			sb_tags.delete(sb_tags.length()-2, sb_tags.length());
		
		model.addAttribute("cards_tags", sb_tags.toString()) ;
	}
	
	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Cards found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'AdminCards list'");
		
		Page<CardsEntity> list = cardsService.findAll(pageNumber);
		String path = "/admin/channel/card";
		new Pager<CardsEntity>(list, model).pageSetting(path);
		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Cards
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(
			@RequestParam(value="type", defaultValue="user") String type,
			@RequestParam(value="channel_id",defaultValue="0") Integer channel_id,
			Model model) {
		
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		Cards cards = new Cards();
		try {
			Channel c = channelService.findById(channel_id);
			if(c.getType()==0){
				model.addAttribute("return_url", "/admin/channel/edit/"+channel_id);
			}else{
				model.addAttribute("return_url", "/admin/admin_chanels/edit/"+channel_id);
			}
		} catch (Exception e) {
			model.addAttribute("return_url", "/admin/manage_cards");
		}
		
		cards.setChannelId(channel_id);
		model.addAttribute("type", type);
		model.addAttribute("channel_id", channel_id);
		populateModel( model, cards, FormMode.CREATE);
		return CARDS_DETAIL_URL;
	}

	@RequestMapping(value = "/form/{id}")
	public String formForUpdate(Model model, @PathVariable("id") Integer id ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Cards cards = cardsService.findById(id);
		Integer ids[] = {id};
		List<Images> images = imagesService.findByCardIdIn(ids);
		model.addAttribute("images", images);
		populateModel( model, cards, FormMode.UPDATE);
		FileTransfer fileTransfer = new FileTransfer();
		model.addAttribute("fileTransfer", fileTransfer);
		return JSP_FORM;
	}

	
	@RequestMapping(value = "/create",method = RequestMethod.POST)
	public String create_cards(
			Model model,
			HttpServletRequest request,
			HttpServletResponse response,
			@RequestParam(value="channel_id", defaultValue="0") Integer channel_id,
			@RequestParam(value="cards_tags") String hash_tags,
			Cards cards,
			HttpSession session) {
		log("Action 'create'");
		securityCheck(model, request);
		cards.setCreatedAt(new Date());
		cards.setChannelId(channel_id);
		Channel c =channelService.findById(channel_id);
		try {
			String url=cards.getTargetUrl();
			if(url.contains("youtu.be")){
				url=url.replace("https://youtu.be/", "https://www.youtube.com/watch?v=");
			}
			String video_id=Utils.getIdYoutube(url);
			if(video_id==""|| video_id==null){
				model.addAttribute("error", "Link youtube video is not correct");
			}
			String youtube_id="http://img.youtube.com/vi/"+video_id+"/mqdefault.jpg";
			cards.setThumbnailUrl(youtube_id);
		} catch (Exception e) {
			System.out.println(e);
		}
		cards.setUserId(c.getUserId());
		cards.setCountLike(0);
		cards.setCommentCount(0);
		cards.setShare(0);
		cards.setHitCount(0);
		Cards createdCard = cardsService.create(cards); 
		
		if (hash_tags!=null)
		{
			String tags[] = hash_tags.split(",");
			for (String tag : tags)
			{
				CardTags cardTags = new CardTags();
				cardTags.setCardId(createdCard.getId());
				cardTags.setName(tag.trim());
				cardTagsService.create(cardTags);
			}
		}
		
		if(createdCard !=null){
			c.setCardsRecentId(createdCard.getId());
			channelService.update(c);
				return "redirect:/admin/channel/edit/"+channel_id;
		}else {
			return CARDS_DETAIL_URL;
		} 
	}
	
	
	
	

	@RequestMapping(value = "/update/{id}",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> update(
			Model model,
			HttpServletRequest request,
			HttpServletResponse response,
			@PathVariable("id") int cardId,
			@RequestParam(value="delete", defaultValue="") String delList,
			@RequestParam(value="cards_tags") String hash_tags,
			@RequestParam(value="fileVerticalThumbnail", required=false) MultipartFile imgVerticalThumbnail,
			@RequestParam(value="fileThumbnail", required=false) MultipartFile imgThumbnail,
			Cards cards) {
		log("Action 'update'");
		
		securityCheck(model, request);
		
		HashMap<String, Object> ret = new HashMap<String, Object>();

		Cards updatedCard = cardsService.findById(cardId);
		
		if (imgVerticalThumbnail != null)
		{
			System.out.println("VerticalThumbnail 이미지 업로드===========");
			System.out.println("file_name:"+imgVerticalThumbnail.getName());
			System.out.println("file_ori_name:"+imgVerticalThumbnail.getOriginalFilename());
			String[] extension = imgVerticalThumbnail.getOriginalFilename().split("\\.");
			System.out.println("length:"+extension.length);
			if (extension.length < 2)
			{
				return FAIL(ret, "이미지 파일만 업로드 가능합니다.");
			}
			
			String verticalThumbnailUrl = uploadS3(vertical_thumbnail_path, imgVerticalThumbnail, extension[1]);
			if (verticalThumbnailUrl==null)
				return FAIL(ret, "첫 이미지 업로드에 실패하였습니다.");

			updatedCard.setVerticalThumbnailUrl(verticalThumbnailUrl);
		} else {
			updatedCard.setVerticalThumbnailUrl(cards.getVerticalThumbnailUrl());
		}
		
		if (imgThumbnail != null)
		{
			System.out.println("Thumbnail 이미지 업로드===========");
			System.out.println("file_name:"+imgThumbnail.getName());
			System.out.println("file_ori_name:"+imgThumbnail.getOriginalFilename());
			String[] extension = imgThumbnail.getOriginalFilename().split("\\.");
			System.out.println("length:"+extension.length);
			if (extension.length < 2)
			{
				return FAIL(ret, "이미지 파일만 업로드 가능합니다.");
			}
			
			String thumbnailUrl = uploadS3(thumbnail_path, imgThumbnail, extension[1]);
			if (thumbnailUrl==null)
				return FAIL(ret, "첫 이미지 업로드에 실패하였습니다.");

			updatedCard.setThumbnailUrl(thumbnailUrl);
		} else {
			updatedCard.setThumbnailUrl(cards.getThumbnailUrl());
		}
		
		updatedCard.setUserId(cards.getUserId());
		updatedCard.setTargetUrl(cards.getTargetUrl());
		updatedCard.setTitle(cards.getTitle());
		updatedCard.setBody(cards.getBody());
		updatedCard.setType(cards.getType());
		updatedCard.setAdIs(cards.getAdIs());
		updatedCard.setAdMent(cards.getAdMent());
		updatedCard.setActor(cards.getActor());
		updatedCard.setActorJob(cards.getActorJob());
		updatedCard.setAdLink(cards.getAdLink());
		updatedCard.setRelatedCardId(cards.getRelatedCardId());
		
		updatedCard = cardsService.update(updatedCard);
		
		if (hash_tags!=null)
		{
			String tags[] = hash_tags.split(",");
			cardTagsService.deleteByCardId(cardId);
			for (String tag : tags)
			{
				CardTags cardTags = new CardTags();
				cardTags.setCardId(cardId);
				cardTags.setName(tag.trim());
				cardTagsService.create(cardTags);
			}
		}
		
		List<Images> cardDatas;
		if(delList != "" && delList != null){	
			if(delList.contains(",")){
				System.out.println("지울 여러이미지 리스트 : "+delList);
				String[] splitDelList = delList.split(",");
				Integer ids[] = new Integer[splitDelList.length];
				for(int i = 0 ; i < splitDelList.length ; i++){
					ids[i] = Integer.parseInt(splitDelList[i]);
				}
				cardDatas = imagesService.findByIdIn(ids);
			}else{
				System.out.println("지울 이미지 리스트 : "+delList);
				Integer ids[] = {Integer.parseInt(delList)};
				cardDatas = imagesService.findByIdIn(ids);
			}
			deleteFiles(cardDatas);
		}
		
		if(updatedCard !=null){
			ret.put("url", CARDS_DETAIL_URL+"/"+updatedCard.getId());
			ret.put("cardId", updatedCard.getId());
			return SUCCESS(ret);
		}else {
			return FAIL(ret, "카드 수정이 실패하였습니다.");
		} 
	}

	@RequestMapping(value = "/delete/{id}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
		log("Action 'delete'" );
		try {
			Cards c =cardsService.findById(id);
			if(c.getChannelId()!=null){
				Channel channel = channelService.findById(c.getChannelId());
				if(channel.getCardsRecentId()!=null && channel.getCardsRecentId().equals(c.getId())){
					channel.setCardsRecentId(null);
					channelService.update(channel);
				}
			}
			cardTagsService.deleteByCardId(id);
			cardsService.delete( id );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "cards.error.delete", e);
		}
		return "redirect:/admin/channel/card";
	}


	@RequestMapping(value={"/create_files/{id}"},
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> cardCreateFiles(
			HttpServletResponse response,
			Model model,
			@ModelAttribute("fileTransfer") FileTransfer fileTransfer,
			@PathVariable("id") int cardId) {
		log("Action 'cardCreateFiles'");

		HashMap<String, Object> ret = new HashMap<String, Object>();
		
		if (fileTransfer==null)
		{
			return FAIL(ret, "인자 확인해주세요.");
		}
		
		List<MultipartFile> multipartFiles = fileTransfer.getFiles();
		Cards card = cardsService.findById(cardId);
		
		List<Images> tempImages = new ArrayList<Images>(); 
		int numOfFiles = 0;
		int numOfSucess = 0;
		
		for (MultipartFile multipartFile : multipartFiles) {
			if(multipartFile != null){
				numOfFiles++;
				System.out.println("file_name:"+multipartFile.getName());
				System.out.println("file_ori_name:"+multipartFile.getOriginalFilename());
//				String originalFileName = multipartFile.getOriginalFilename().replaceAll("[^a-zA-Z0-9.-]", "_");
				String[] extension = multipartFile.getOriginalFilename().split("\\.");
				if (extension.length < 2)
				{
					return FAIL(ret, "이미지 파일만 업로드 가능합니다.");
				}
				
				String cardImageUrl = uploadS3(card_image_path, multipartFile, extension[1]);
				if (cardImageUrl==null)
					return FAIL(ret, "이미지 업로드에 실패하였습니다.");

				log("Action 'notice file Save'" + "file created");
				Images cardData = new Images();
				cardData.setCardId(card.getId());
				cardData.setImageUrl(cardImageUrl);
				cardData = imagesService.create(cardData);
				tempImages.add(cardData);
				numOfSucess++;
	
			} else {
				return FAIL(ret, "인자 확인해주세요.");
			}
		}
		
		if(numOfFiles == numOfSucess){
			ret.put("url", CARDS_DETAIL_URL+"/"+cardId);
			return SUCCESS(ret);
		} else {
			deleteFiles(tempImages);
			return FAIL(ret, "잠시후 다시 시도해주세요.");
		}
	}

	public void deleteFiles(List<Images> imageDatas){
		log("Action 'deleteFiles");
		String PATH = null;
		System.out.println("delete imageDatas.size : "+imageDatas.size());
		for(Images imageData : imageDatas){
//			PATH = imageData.getImageUrl();
//			boolean result = deleteS3(PATH);
//			System.out.println("delete imageData : "+result);
//			if (result)
				imagesService.delete(imageData.getId());
		}
	}
	
	@RequestMapping(value="/popup_search_card/{type}")
	public String popupSearchCard(Model model,
			@PathVariable("type") String type,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'popupSearchCard");

		System.out.println("type : "+type);
		Page<CardsEntity> list = cardsService.findAll(pageNumber);
		String path = "/admin/channel/card/popup_search_card/"+type;
		new Pager<CardsEntity>(list, model).pageSetting(path);

		MainList mainList = new MainList();
		model.addAttribute("mainList", mainList);
		
		return JSP_POPUP_SEARCH_CARD;
	}
}
