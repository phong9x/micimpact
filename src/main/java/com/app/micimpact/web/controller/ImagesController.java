/*
 * Created on 9 12월 2015 ( Time 16:26:41 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.web.controller;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.FileTransfer;
//--- Entities
import com.app.micimpact.bean.Images;
import com.app.micimpact.bean.UploadFiles;
import com.app.micimpact.bean.Users;
import com.app.micimpact.business.service.CardsService;
//--- Services 
import com.app.micimpact.business.service.ImagesService;
//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.AmazonS3FileManager;
import com.app.micimpact.web.common.BasicEnvironment;
import com.app.micimpact.web.common.FormMode;
import com.app.micimpact.web.common.Message;
import com.app.micimpact.web.common.MessageType;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;


/**
 * Spring MVC controller for 'Images' management.
 */
@Controller
@RequestMapping()
public class ImagesController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "images";
	private static final String MAIN_LIST_NAME   = "list";
	
	public static final String DOMAIN_CARD_IMAGE = "card_image";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "images/form";
	private static final String JSP_LIST   = "images/list";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/images/create";
	private static final String SAVE_ACTION_UPDATE   = "/images/update";

	//--- Main entity service
	@Resource
    private ImagesService imagesService; // Injected by Spring
	//--- Other service(s)
	
	@Resource
	private CardsService cardsService;
	
	@Autowired
	private AmazonS3FileManager amazonS3FileManager;

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ImagesController() {
		super(ImagesController.class, MAIN_ENTITY_NAME );
		log("ImagesController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param images
	 */
	private void populateModel(Model model, Images images, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, images);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Images found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/images")
	public String list(Model model) {
		log("Action 'list'");
		List<Images> list = imagesService.findAll();
		model.addAttribute(MAIN_LIST_NAME, list);		
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Images
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/images/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		Images images = new Images();	
		populateModel( model, images, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing Images
	 * @param model Spring MVC model
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/images/form/{id}")
	public String formForUpdate(Model model, @PathVariable("id") Integer id ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Images images = imagesService.findById(id);
		populateModel( model, images, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param images  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/images/create" ) // GET or POST
	public String create(@Valid Images images, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				Images imagesCreated = imagesService.create(images); 
				model.addAttribute(MAIN_ENTITY_NAME, imagesCreated);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				return redirectToForm(httpServletRequest, images.getId() );
			} else {
				populateModel( model, images, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "images.error.create", e);
			populateModel( model, images, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param images  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/images/update" ) // GET or POST
	public String update(@Valid Images images, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				Images imagesSaved = imagesService.update(images);
				model.addAttribute(MAIN_ENTITY_NAME, imagesSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, images.getId());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, images, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "images.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, images, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/images/delete/{id}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
		log("Action 'delete'" );
		try {
			imagesService.delete( id );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "images.error.delete", e);
		}
		return redirectToList();
	}

	@RequestMapping(value={"/admin/manage_cards/create_files/{id}"},
			method= RequestMethod.POST,
			produces="text/plain;charset=UTF-8")
	@ResponseBody
	public String cardCreateFiles(
			HttpServletResponse response,
			Model model,
			@ModelAttribute("fileTransfer") FileTransfer fileTransfer,
			@PathVariable("id") int cardId) throws JsonProcessingException {
		log("Action 'cardCreateFiles'");
		
		List<MultipartFile> multipartFiles = fileTransfer.getFiles();
		Cards card = cardsService.findById(cardId);
		String domain = DOMAIN_CARD_IMAGE;
		
		HashMap<String, Object> responseMap = new HashMap<String, Object>();
		
		List<Images> tempImages = new ArrayList<Images>(); 
		int numOfFiles = 0;
		int numOfSucess = 0;
		SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
		String today = formatter.format(new Date());
		String DIRECTORY = domain+"/";
		String PATH = "";
		
		for (MultipartFile multipartFile : multipartFiles) {
			if(multipartFile != null){
				numOfFiles++;
				String originalFileName = multipartFile.getOriginalFilename().replaceAll("[^a-zA-Z0-9.-]", "_");
				String extension = originalFileName.substring(originalFileName.lastIndexOf(".") + 1, originalFileName.length());
				boolean fileIsValid = BasicEnvironment.ALLOW_IMAGE_FORMAT.contains(extension.toLowerCase());
				
//				String tempFileName = today + originalFileName;
				String tempFileName = originalFileName;
				PATH = DIRECTORY + tempFileName;
	
				try {
					if(!fileIsValid){
						throw new InvalidFileExtensionException();
					}	
					File newSave = File.createTempFile(originalFileName, null);
					multipartFile.transferTo(newSave);
					amazonS3FileManager.upload(PATH, newSave);
					
					log("Action 'notice file Save'" + "file created");
					Images cardData = new Images();
					cardData.setCardId(card.getId());
					cardData.setImageUrl(PATH);
					cardData = imagesService.create(cardData);
					tempImages.add(cardData);
					numOfSucess++;
				} catch (IllegalStateException e) {
					log("create file, illegal state exception");
				} catch (IOException e) {
					log("create file, io exception");
				} catch (InvalidFileExtensionException e) {
					log("create file, invalid file extension exception");
					responseMap.put("success", "false"); 
					responseMap.put("message", "업로드 가능한 파일이 아닙니다. \n파일 업로드에 실패했습니다.\n업로드 가능한 파일은 다음과 같습니다.\nhwp, pdf, xls, xlsx, docx, doc, ppt, pptx");
					ObjectMapper mapper = new ObjectMapper();
					return mapper.writeValueAsString(responseMap);
				}
			}
		}
		if(numOfFiles == numOfSucess){
			responseMap.put("success", "true"); 
			responseMap.put("message", PATH);
		}else {
			deleteFiles(tempImages);
//			postingsService.delete(posting.getId());
			responseMap.put("success", "false"); 
			responseMap.put("message", "파일 업로드에 실패했습니다.");
		}
		ObjectMapper mapper = new ObjectMapper();
		
		return mapper.writeValueAsString(responseMap);
	}

	public void deleteFiles(List<Images> imageDatas){
		String PATH = null;
		for(Images imageData : imageDatas){
			PATH = imageData.getImageUrl();
			amazonS3FileManager.delete(PATH);
			imagesService.delete(imageData.getId());
		}
	}
	
	@SuppressWarnings("serial")
	public class InvalidFileExtensionException extends Exception{
		
	}
}
