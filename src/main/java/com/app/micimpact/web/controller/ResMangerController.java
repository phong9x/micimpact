/*
 * Created on 28 Apr 2015 ( Time 15:46:44 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.web.controller;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.servlet.http.HttpServletRequest;

import org.springframework.data.domain.Page;
import org.springframework.security.access.annotation.Secured;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.app.micimpact.bean.Errors;
import com.app.micimpact.bean.Locales;
import com.app.micimpact.bean.Resources;
import com.app.micimpact.bean.UploadFiles;
import com.app.micimpact.bean.UserRoles;
import com.app.micimpact.bean.jpa.ErrorsEntity;
import com.app.micimpact.bean.jpa.LocalesEntity;
import com.app.micimpact.bean.jpa.ResourcesEntity;
import com.app.micimpact.bean.jpa.UploadFilesEntity;
import com.app.micimpact.business.service.ErrorsService;
import com.app.micimpact.business.service.LocalesService;
import com.app.micimpact.business.service.ResourcesService;
import com.app.micimpact.business.service.UploadFilesService;
import com.app.micimpact.business.service.UserRolesService;
//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.Pager;
//--- Entities
//--- List Items 
//--- Services 


@Controller
@Secured("ROLE_RESU")
@RequestMapping("/res")
public class ResMangerController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "resource";

	// 리소스 메인페이지
	private static final String JSP_MAIN   = "res_manager_main";
	
	// 리소스 관리
	private static final String JSP_ERROR_CODE = "resource/error_code";
	private static final String JSP_ERROR_CODE_REGISTER	 = "resource/error_code/register";
	
	private static final String JSP_DOMAIN = "resource/domain";
	private static final String JSP_DOMAIN_REGISTER = "resource/domain/register";
	
	private static final String JSP_FILE = "resource/file";
	private static final String JSP_FILE_REGISTER = "resource/file/register";
	
	private static final String JSP_LOCALE = "resource/locale";
	private static final String JSP_LOCALE_REGISTER = "resource/locale/register";
	
	private static final String ERROR_CODE_URL = "/res/res_manage/error_code";
	private static final String DOMAIN_URL = "/res/res_manage/domain";
	private static final String FILE_URL = "/res/res_manage/file";
	private static final String LOCALE_URL = "/res/res_manage/locale";
	
	// 권한 관리
	private static final String JSP_AUTHORITY   = "authority";
	private static final String JSP_AUTHORITY_REGISTER   = "authority/register";

	private static final String AUTHORITY_URL = "/res/auth_manage/authority";
	
	//resource type
	private static final int TYPE_ERROR = 1;
	private static final int TYPE_DOMAIN = 2;
	
	
	@Resource
	private ErrorsService errorsService;
	
	@Resource
	private ResourcesService resourcesService;
	
	@Resource
	private UploadFilesService uploadFilesService;
	
	@Resource
	private LocalesService localesService;
	
	@Resource
	private UserRolesService userRolesService;


	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public ResMangerController() {
		super(ResMangerController.class, MAIN_ENTITY_NAME );
		log("ResManagerController created.");
	}

	@RequestMapping()
	public String mainPage(Model model) {
		log("Action 'main page'");
		
		return JSP_MAIN;
	}

	@RequestMapping("/res_manage/error_code")
	public String resourceErrorCodePage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'res_manage/error_code page'");
		
		Page<ErrorsEntity> files = errorsService.findAll(pageNumber);
		new Pager<ErrorsEntity>(files, model).pageSetting(ERROR_CODE_URL);
		model.addAttribute("rType", TYPE_ERROR);
		
		return JSP_ERROR_CODE;
	}
	
	@RequestMapping("/res_manage/error_code/delete/{id}")
	public RedirectView resourceErrorCodeDeletePage(
			Model model, 
			@PathVariable("id") int id) {
		log("Action 'errorCodeDelete'");
		errorsService.delete(id);
		
		String path = ERROR_CODE_URL;
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}

	@RequestMapping("/res_manage/error_code/search")
	public String resourceErrorCodeSearchPage(
			Model model, 
			@RequestParam(value="page", defaultValue="1") Integer pageNumber,
			@RequestParam(value="option", defaultValue="1") int option, 
			@RequestParam(value="keyword") String keyword) {
		log("Action 'res_manage/error_code/search page'");
		
		System.out.println("get page : " + pageNumber);
		Page<ErrorsEntity> list = errorsService.findSearchAll(pageNumber, option, keyword);//"+ $("#options").val() + "&keyword="
		new Pager<ErrorsEntity>(list, model).pageSetting("/res/res_manage/error_code/search?page="+ pageNumber + "&option="+option+ "&keyword="+keyword);
		
		return JSP_ERROR_CODE;
	}

	@RequestMapping("/res_manage/error_code/register")
	public String resourceErrorCodeRegisterPage(Model model) {
		log("Action 'res_manage/error_code/register page'");

		Errors error = new Errors();
		model.addAttribute("error", error);
		
		return JSP_ERROR_CODE_REGISTER;
	}

	@RequestMapping("/res_manage/error_code/register/complete")
	public RedirectView resourceErrorCodeRegisterCompletePage(Model model, Errors error) {
		log("Action 'res_manage/error_code/register/complete page'");
		
		errorsService.create(error);
		
		String path = ERROR_CODE_URL;
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		
		return rv;
	}

	@RequestMapping("/res_manage/domain")
	public String resourceDomainPage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'res_manage/domain page'");
		
		Page<ResourcesEntity> files = resourcesService.findAll(pageNumber);
		new Pager<ResourcesEntity>(files, model).pageSetting(DOMAIN_URL);
		model.addAttribute("rType", TYPE_DOMAIN);
		return JSP_DOMAIN;
	}
	
	@RequestMapping("/res_manage/domain/delete/{id}")
	public RedirectView resourceDomainDeletePage(
			Model model, 
			@PathVariable("id") int id) {
		log("Action 'domainDelete'");
		resourcesService.delete(id);
		
		String path = DOMAIN_URL;
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}

	@RequestMapping("/res_manage/domain/search")
	public String resourceDomainSearchPage(
			Model model, 
			@RequestParam(value="page", defaultValue="1") Integer pageNumber,
			@RequestParam(value="option", defaultValue="1") int option, 
			@RequestParam(value="keyword") String keyword) {
		log("Action 'res_manage/domain/search page'");
		
		System.out.println("get page : " + pageNumber);
		Page<ResourcesEntity> list = resourcesService.findSearchAll(pageNumber, option, keyword);//"+ $("#options").val() + "&keyword="
		new Pager<ResourcesEntity>(list, model).pageSetting("/res/res_manage/domain/search?page="+ pageNumber + "&option="+option+ "&keyword="+keyword);
		
		return JSP_DOMAIN;
	}

	@RequestMapping("/res_manage/domain/register")
	public String resourceDomainRegisterPage(Model model) {
		log("Action 'res_manage/domain/register page'");
		
		Resources resource = new Resources();
		model.addAttribute("resource", resource);
		
		List<Locales> list = localesService.findAll();
		model.addAttribute("list", list);
		
		return JSP_DOMAIN_REGISTER;
	}

	@RequestMapping("/res_manage/domain/register/complete")
	public RedirectView resourceResourceRegisterCompletePage(Model model, Resources resource) {
		log("Action 'res_manage/domain/register/complete page'");
		
		resourcesService.create(resource);
		
		String path = DOMAIN_URL;
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		
		return rv;
	}

	@RequestMapping("/res_manage/file")
	public String resourceFilePage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'res_manage/file page'"+ pageNumber);
		
		Page<UploadFilesEntity> files = uploadFilesService.findAll(pageNumber);
		new Pager<UploadFilesEntity>(files, model).pageSetting(FILE_URL);
		
		return JSP_FILE;
	}
	
	@RequestMapping("/res_manage/file/delete/{id}")
	public RedirectView resourceFileDeletePage(
			Model model, 
			@PathVariable("id") int id) {
		log("Action 'fileDelete'");
		uploadFilesService.delete(id);
		
		String path = FILE_URL;
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}

	@RequestMapping("/res_manage/file/search")
	public String resourceFileSearchPage(
			Model model, 
			@RequestParam(value="page", defaultValue="1") Integer pageNumber,
			@RequestParam(value="option", defaultValue="1") int option, 
			@RequestParam(value="keyword") String keyword) {
		log("Action 'res_manage/file/search page'");
		
		System.out.println("get page : " + pageNumber);
		Page<UploadFilesEntity> list = uploadFilesService.findSearchAll(pageNumber, option, keyword);//"+ $("#options").val() + "&keyword="
		new Pager<UploadFilesEntity>(list, model).pageSetting("/res/res_manage/file/search?page="+ pageNumber + "&option="+option+ "&keyword="+keyword);
		
		return JSP_FILE;
	}

	@RequestMapping("/res_manage/file/register")
	public String resourceFileRegisterPage(Model model) {
		log("Action 'res_manage/file/register page'");
		
		UploadFiles file = new UploadFiles();
		model.addAttribute("file", file);
		
		return JSP_FILE_REGISTER;
	}

	@RequestMapping("/res_manage/file/register/complete")
	public RedirectView resourceFileRegisterCompletePage(Model model, UploadFiles file) {
		log("Action 'res_manage/domain/register/complete page'");
		
		uploadFilesService.create(file);
		
		String path = FILE_URL;
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		
		return rv;
	}

	@RequestMapping("/res_manage/locale")
	public String resourceLocalePage(Model model,
			@RequestParam(value="page", defaultValue="1") Integer pageNumber) {
		log("Action 'res_manage/locale page'"+ pageNumber);
		
		Page<LocalesEntity> files = localesService.findAll(pageNumber);
		new Pager<LocalesEntity>(files, model).pageSetting(LOCALE_URL);
		
		return JSP_LOCALE;
	}
	
	@RequestMapping("/res_manage/locale/delete/{id}")
	public RedirectView resourceLocaleDeletePage(
			Model model, 
			@PathVariable("id") int id) {
		log("Action 'localeDelete'");
		localesService.delete(id);
		
		String path = LOCALE_URL;
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}

	@RequestMapping("/res_manage/locale/search")
	public String resourceLocaleSearchPage(
			Model model, 
			@RequestParam(value="page", defaultValue="1") Integer pageNumber,
			@RequestParam(value="option", defaultValue="1") int option, 
			@RequestParam(value="keyword") String keyword) {
		log("Action 'res_manage/locale/search page'");

		System.out.println("get page : " + pageNumber);
		Page<LocalesEntity> list = localesService.findSearchAll(pageNumber, option, keyword);//"+ $("#options").val() + "&keyword="
		new Pager<LocalesEntity>(list, model).pageSetting("/res/res_manage/locale/search?page="+ pageNumber + "&option="+option+ "&keyword="+keyword);
		
		return JSP_LOCALE;
	}

	@RequestMapping("/res_manage/locale/register")
	public String resourceLocaleRegisterPage(Model model) {
		log("Action 'res_manage/locale/register page'");
		
		Locales locale = new Locales();
		model.addAttribute("locale", locale);
		
		return JSP_LOCALE_REGISTER;
	}

	@RequestMapping("/res_manage/locale/register/complete")
	public RedirectView resourceLocaleRegisterCompletePage(Model model, Locales locale) {
		log("Action 'res_manage/locale/register/complete page'");
		
		localesService.create(locale);
		
		String path = LOCALE_URL;
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		
		return rv;
	}
	
	@RequestMapping("/auth_manage/authority")
	public String authorityPage(Model model) {
		log("Action '/auth_manage/authority page'");
		
		List<UserRoles> list = userRolesService.findAll();
		model.addAttribute("list", list);
		
		return JSP_AUTHORITY;
	}
	
	@RequestMapping("/auth_manage/authority/delete/{id}")
	public RedirectView authorityDeletePage(
			Model model, 
			@PathVariable("id") int id) {
		log("Action 'authorityDelete'");
		
		userRolesService.delete(id);
		
		String path = AUTHORITY_URL;
		
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		return rv;
	}

	@RequestMapping("/auth_manage/authority/{kind}/{keyword}")
	public String authoritySearchPage(
			Model model, 
			@PathVariable("kind") int iKind,
			@PathVariable("keyword") String strKeyword) {
		log("Action '/auth_manage/authority/search page'");
		
		List<UserRoles> userRole = userRolesService.findByRoleLike(strKeyword);
		
		model.addAttribute("list", userRole);
		
		return JSP_AUTHORITY;
	}

	@RequestMapping("/auth_manage/authority/register")
	public String authorityRegisterPage(Model model) {
		log("Action '/auth_manage/authority/register page'");
		
		UserRoles userRole = new UserRoles();
		model.addAttribute("authority", userRole);
		
		return JSP_AUTHORITY_REGISTER;
	}

	@RequestMapping("/auth_manage/authority/register/complete")
	public RedirectView authorityRegisterCompletePage(Model model, UserRoles userRole) {
		log("Action '/auth_manage/authority/register/complete page'");

		userRolesService.saveUserRole(userRole.getId(), userRole.getRole());
		
		String path = AUTHORITY_URL;
		RedirectView rv = new RedirectView(path);
		rv.setExposeModelAttributes(false);
		
		return rv;
	}
	
	@RequestMapping(value="/res_manage/export_excel")
	public ModelAndView exportExcel(
			HttpServletRequest request,
			@RequestParam("rType") int resType) {
		log("Action 'exportExcel'");
		ModelAndView modelAndView = new ModelAndView();
		modelAndView.setViewName("ExcelExportView");
		
		if(resType == TYPE_ERROR){
			ErrorsEntity entity = new ErrorsEntity();
			List<Errors> rows = errorsService.findAll();
			
			List<String> columnNames = new ArrayList<String>();
			for (Field field : entity.getClass().getDeclaredFields()) {
			   Column column = field.getAnnotation(Column.class);
			   if (column != null) {
				   columnNames.add(column.name());
			   }
			}
			modelAndView.addObject("columnNames", columnNames);
			modelAndView.addObject("rows", rows);
		}else if(resType == TYPE_DOMAIN){
			ResourcesEntity entity = new ResourcesEntity();
			List<Resources> rows = resourcesService.findAll();
			
			List<String> columnNames = new ArrayList<String>();
			for (Field field : entity.getClass().getDeclaredFields()) {
			   Column column = field.getAnnotation(Column.class);
			   if (column != null) {
				   columnNames.add(column.name());
			   }
			}
			modelAndView.addObject("columnNames", columnNames);
			modelAndView.addObject("rows", rows);
		}
		
		return modelAndView;
	}
}
