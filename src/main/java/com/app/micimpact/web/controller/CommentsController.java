/*
 * Created on 9 12ì›” 2015 ( Time 16:26:40 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.web.controller;


import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.FormMode;
import com.app.micimpact.web.common.Message;
import com.app.micimpact.web.common.MessageType;

//--- Entities
import com.app.micimpact.bean.Comments;
import com.app.micimpact.bean.PageComment;
import com.app.micimpact.bean.PageReport;
//--- Services 
import com.app.micimpact.business.service.CommentsService;


/**
 * Spring MVC controller for 'Comments' management.
 */
@Controller
@RequestMapping("/admin/card_reple")
public class CommentsController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "comments";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "comments/form";
	private static final String JSP_LIST   = "admin/card_reple";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/comments/create";
	private static final String SAVE_ACTION_UPDATE   = "/comments/update";

	//--- Main entity service
	@Resource
    private CommentsService commentsService; // Injected by Spring
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public CommentsController() {
		super(CommentsController.class, MAIN_ENTITY_NAME );
		log("CommentsController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param comments
	 */
	private void populateModel(Model model, Comments comments, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, comments);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Comments found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/{id}")
	public String list(
			@RequestParam(value="page", defaultValue="1") Integer page,
			@RequestParam(value="delete", defaultValue="0") Integer delete,
			@RequestParam(value="hide", defaultValue="0") Integer hide,
			@RequestParam(value="show", defaultValue="0") Integer show,
			@RequestParam(value="name", defaultValue="") String name,
			@PathVariable("id") Integer id,
			 RedirectAttributes redirectAttributes,
			Model model) {
		if(delete>0){
			try {
				commentsService.delete(delete);
			} catch (Exception e) {
				// TODO: handle exception
			}
		}
		model.addAttribute("hide", 0);
		if(show>0){
			try {
				Comments c= commentsService.findById(show);
				c.setIsShow(1);
				commentsService.update(c);
				model.addAttribute("show", 1);
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
		if(hide>0){
			try {
				Comments c= commentsService.findById(hide);
				c.setIsShow(0);
				commentsService.update(c);
				model.addAttribute("hide", 1);
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
			} catch (Exception e) {
				// TODO: handle exception
			}
			
		}
		PageComment p =commentsService.findComment(id,page, 10);
		int size;
		if(p.getList()==null){
			size=0;
		}else{
			size= p.getList().size();
		}
		
		model.addAttribute(MAIN_LIST_NAME, p.getList());
		model.addAttribute("currentIndex", page);
		model.addAttribute("beginIndex", 1);
		model.addAttribute("endIndex", p.getTotalPages());
		model.addAttribute("totalPages", p.getTotalPages());
		model.addAttribute("url", "/admin/card_reple/"+id);
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Comments
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		Comments comments = new Comments();	
		populateModel( model, comments, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing Comments
	 * @param model Spring MVC model
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{id}")
	public String formForUpdate(Model model, @PathVariable("id") Integer id ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		Comments comments = commentsService.findById(id);
		populateModel( model, comments, FormMode.UPDATE);		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param comments  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(@Valid Comments comments, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'create'");
		try {
			if (!bindingResult.hasErrors()) {
				Comments commentsCreated = commentsService.create(comments); 
				model.addAttribute(MAIN_ENTITY_NAME, commentsCreated);

				//---
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				return redirectToForm(httpServletRequest, comments.getId() );
			} else {
				populateModel( model, comments, FormMode.CREATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			log("Action 'create' : Exception - " + e.getMessage() );
			messageHelper.addException(model, "comments.error.create", e);
			populateModel( model, comments, FormMode.CREATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param comments  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update" ) // GET or POST
	public String update(@Valid Comments comments, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
		log("Action 'update'");
		try {
			if (!bindingResult.hasErrors()) {
				//--- Perform database operations
				Comments commentsSaved = commentsService.update(comments);
				model.addAttribute(MAIN_ENTITY_NAME, commentsSaved);
				//--- Set the result message
				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
				log("Action 'update' : update done - redirect");
				return redirectToForm(httpServletRequest, comments.getId());
			} else {
				log("Action 'update' : binding errors");
				populateModel( model, comments, FormMode.UPDATE);
				return JSP_FORM;
			}
		} catch(Exception e) {
			messageHelper.addException(model, "comments.error.update", e);
			log("Action 'update' : Exception - " + e.getMessage() );
			populateModel( model, comments, FormMode.UPDATE);
			return JSP_FORM;
		}
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}") // GET or POST
	public String delete(RedirectAttributes redirectAttributes, 
			@PathVariable("id") Integer id
			) {
		log("Action 'delete'" );
		try {
			commentsService.delete( id );
			//--- Set the result message
			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
		} catch(Exception e) {
			messageHelper.addException(redirectAttributes, "comments.error.delete", e);
		}
		return redirectToList();
	}

}
