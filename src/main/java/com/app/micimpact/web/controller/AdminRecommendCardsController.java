/*
 * Created on 9 12월 2015 ( Time 16:26:40 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.web.controller;

import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.MainList;
import com.app.micimpact.business.service.CardsService;
import com.app.micimpact.business.service.MainListService;
import com.app.micimpact.data.repository.jpa.MainListJpaRepository;
//--- Common classes
import com.app.micimpact.web.common.AbstractController;
import com.app.micimpact.web.common.FormMode;
//--- Entities
//--- Services 


/**
 * Spring MVC controller for 'Cards' management.
 */
@Controller
@RequestMapping("/admin/manage_recommend_cards")
public class AdminRecommendCardsController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "main_list";
	private static final String MAIN_LIST_NAME   = "list";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_FORM   = "admin/main_list/main_list_form.tiles";
	private static final String JSP_LIST   = "admin/main_list/main_list_list.tiles";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/admin/manage_recommend_cards/create";
	private static final String SAVE_ACTION_UPDATE   = "/admin/manage_recommend_cards/update";

	private static final String CARDS_DETAIL_URL   = "/admin/manage_recommend_cards/form";
	
	//--- Main entity service
	@Resource
    private MainListService mainListService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private CardsService cardsService;
	

	@Resource
    private MainListJpaRepository mainListJpaRepository ; // Injected by Spring

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public AdminRecommendCardsController() {
		super(AdminRecommendCardsController.class, MAIN_ENTITY_NAME );
		log("CardsController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	private void populateListOfCardsItems(Model model) {
		List<Cards> list = cardsService.findAll();
//		List<CategoriesListItem> items = new LinkedList<CategoriesListItem>();
//		for ( Cards cards : list ) {
//			items.add(new CategoriesListItem( cards ) );
//		}
		model.addAttribute("listOfCardsListItem", list ) ;
	}
	
	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param cards
	 */
	private void populateModel(Model model, MainList mainList, FormMode formMode) {
		//--- Main entity
		model.addAttribute(MAIN_ENTITY_NAME, mainList);
		if ( formMode == FormMode.CREATE ) {
			model.addAttribute(MODE, MODE_CREATE); // The form is in "create" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_CREATE); 			
			//--- Other data useful in this screen in "create" mode (all fields)
			populateListOfCardsItems(model);
		}
		else if ( formMode == FormMode.UPDATE ) {
			model.addAttribute(MODE, MODE_UPDATE); // The form is in "update" mode
			model.addAttribute(SAVE_ACTION, SAVE_ACTION_UPDATE); 			
			//--- Other data useful in this screen in "update" mode (only non-pk fields)
			populateListOfCardsItems(model);
		}
	}

	//--------------------------------------------------------------------------------------
	// Request mapping
	//--------------------------------------------------------------------------------------
	/**
	 * Shows a list with all the occurrences of Cards found in the database
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping()
	public String list(Model model) {
		log("Action 'AdminRecommendCards list'");
		
		List<MainList> list = mainListService.findAllByOrderByOrderAsc();
		model.addAttribute("list", list);
		List<Cards> cardsList = cardsService.findAll();
		model.addAttribute("listOfCardsListItem", cardsList) ;
		return JSP_LIST;
	}

	/**
	 * Shows a form page in order to create a new Cards
	 * @param model Spring MVC model
	 * @return
	 */
	@RequestMapping("/form")
	public String formForCreate(Model model) {
		log("Action 'formForCreate'");
		//--- Populates the model with a new instance
		MainList mainList = new MainList();	
		populateModel( model, mainList, FormMode.CREATE);
		return JSP_FORM;
	}

	/**
	 * Shows a form page in order to update an existing Cards
	 * @param model Spring MVC model
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/form/{id}")
	public String formForUpdate(Model model, @PathVariable("id") Integer id ) {
		log("Action 'formForUpdate'");
		//--- Search the entity by its primary key and stores it in the model 
		MainList mainList = mainListService.findById(id);
		populateModel( model, mainList, FormMode.UPDATE);
		
		return JSP_FORM;
	}

	/**
	 * 'CREATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param cards  entity to be created
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/create/{id}",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> create(Model model,
			HttpServletRequest request,
			HttpServletResponse response,
			@PathVariable("id") int cardId) {
		log("Action 'create'");
		
		securityCheck(model, request);
		
		HashMap<String, Object> ret = new HashMap<String, Object>();
		
		List<MainList> list = mainListService.findAll();
		try {

			Integer order = list.size()+1;
			MainList mainList = new MainList();
			System.out.println("================cardId : "+cardId);
			System.out.println("================order : "+order);
			mainList.setCardId(cardId);
			mainList.setOrder(order);
			mainListService.createMainList(mainList);
			return SUCCESS(ret);
		} catch(Exception e) {
			System.out.println("================5==============");
			return FAIL(ret, "추천카드 추가를 실패하였습니다.");
		}
		
	}
//	@RequestMapping(value = "/create" ) // GET or POST
//	public String create(@Valid Cards cards, BindingResult bindingResult, Model model, RedirectAttributes redirectAttributes, HttpServletRequest httpServletRequest) {
//		log("Action 'create'");
//		try {
//			if (!bindingResult.hasErrors()) {
//				Cards cardsCreated = cardsService.create(cards); 
//				model.addAttribute(MAIN_ENTITY_NAME, cardsCreated);
//
//				//---
//				messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"save.ok"));
////				return redirectToForm(httpServletRequest, cards.getId());
//				return "redirect:/admin/manage_cards/form/"+cards.getId();
//			} else {
//				populateModel( model, cards, FormMode.CREATE);
//				return JSP_FORM;
//			}
//		} catch(Exception e) {
//			log("Action 'create' : Exception - " + e.getMessage() );
//			messageHelper.addException(model, "cards.error.create", e);
//			populateModel( model, cards, FormMode.CREATE);
//			return JSP_FORM;
//		}
//	}

	/**
	 * 'UPDATE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param cards  entity to be updated
	 * @param bindingResult Spring MVC binding result
	 * @param model Spring MVC model
	 * @param redirectAttributes Spring MVC redirect attributes
	 * @param httpServletRequest
	 * @return
	 */
	@RequestMapping(value = "/update/{id}",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> update(
			Model model,
			HttpServletRequest request,
			HttpServletResponse response,
			@PathVariable("id") int mainListId) {
		log("Action 'update'");
		
		securityCheck(model, request);
		
		HashMap<String, Object> ret = new HashMap<String, Object>();

		MainList updatedMain = mainListService.findById(mainListId);
		
		updatedMain.setOrder(1);
		updatedMain = mainListService.update(updatedMain);
		
		if(updatedMain !=null){
			ret.put("url", CARDS_DETAIL_URL);
			return SUCCESS(ret);
		}else {
			return FAIL(ret, "추천카드 수정이 실패하였습니다.");
		} 
	}

	/**
	 * 'DELETE' action processing. <br>
	 * This action is based on the 'Post/Redirect/Get (PRG)' pattern, so it ends by 'http redirect'<br>
	 * @param redirectAttributes
	 * @param id  primary key element
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE) // GET or POST
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> delete(
			Model model,
			HttpServletRequest request,
			RedirectAttributes redirectAttributes, 
			@PathVariable("id") Integer id) {
		log("Action 'delete'" );

		securityCheck(model, request);
		
		HashMap<String, Object> ret = new HashMap<String, Object>();
		
		try {
			//--- Set the result message
			mainListService.delete(id);
			return SUCCESS(ret);
		} catch(Exception e) {
			return FAIL(ret, "추천 해제에 실패하였습니다.");
		}
	}
//	@RequestMapping(value = "/delete/{id}") // GET or POST
//	public String delete(RedirectAttributes redirectAttributes, @PathVariable("id") Integer id) {
//		log("Action 'delete'" );
//		try {
//			mainListService.delete( id );
//			//--- Set the result message
//			messageHelper.addMessage(redirectAttributes, new Message(MessageType.SUCCESS,"delete.ok"));	
//		} catch(Exception e) {
//			messageHelper.addException(redirectAttributes, "cards.error.delete", e);
//		}
//		return "redirect:/manage_recommend_cards";
//	}


	
	@RequestMapping(value ="/update_sort",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> updateSort(
			MultipartHttpServletRequest request,
			HttpServletResponse response) throws Exception {

		HashMap<String, Object> ret = new HashMap<String, Object>();
		
		String json = request.getParameter("data");		 
		System.out.println("json : "+json);
		
		Object obj = JSONValue.parseWithException(json);
   	    JSONArray array = (JSONArray)obj;
   	    JSONObject jobj = null;
   	    for(int i=0;i<array.size();i++) {
	    	jobj = (JSONObject)array.get(i);
	    	int rank = (i+1);
	    	int idx = Integer.parseInt((String) jobj.get("index"+(i+1)));
	    	System.out.println("index : " + idx + "| rank : " + rank);
	    	
	    	MainList mainList = mainListService.findById(idx);
	    	mainList.setOrder(rank);
	    	
	    	try {
	    		mainListService.updateMainListOrder(mainList);
			} catch (Exception e) {
				// TODO: handle exception
				return FAIL(ret, "잠시후 다시 시도해주세요.");
			}
	    }
		return SUCCESS(ret);
	}
}
