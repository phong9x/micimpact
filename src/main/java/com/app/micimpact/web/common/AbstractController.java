/*
 * Created on 4 May 2015 ( Time 15:47:17 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.web.common;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.mail.MessagingException;
import javax.mail.internet.AddressException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.context.MessageSource;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.Model;
import org.springframework.ui.velocity.VelocityEngineUtils;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.RequestContextUtils;
import org.springframework.web.servlet.view.velocity.VelocityConfig;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.util.IOUtils;
import com.app.micimpact.bean.Users;
import com.app.micimpact.business.service.UsersService;

public abstract class AbstractController {
	
	protected static final String MODE        = "mode";
	protected static final String MODE_CREATE = "create";
	protected static final String MODE_UPDATE = "update";
	
//	protected static final String CREATE_ACTION = "createAction" ;
//	protected static final String UPDATE_ACTION = "updateAction" ;
	protected static final String SAVE_ACTION = "saveAction" ;
	
	private static final String DATE_FORMAT_PATTERN = "date_format_pattern";

	private final String entityName ;
	protected Logger logger = LoggerFactory.getLogger(this.getClass()) ;

	@Autowired
    private VelocityConfig velocityConfig;
	
	@Resource
	protected MessageHelper messageHelper;
	
	@Resource
	private MessageSource messageSource;
	
	@Resource
	private UsersService usersService;
	
	@Autowired
	private AmazonS3FileManager amazonS3FileManager;
	
	private Map<Locale, CustomDateEditor> customDateEditorByLocales = new HashMap<Locale, CustomDateEditor>();
	
	public AbstractController(Class<? extends AbstractController> controllerClass, String entityName ) {
		super();
		//System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "DEBUG");		
		//System.setProperty(org.slf4j.impl.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, "TRACE");	
		this.entityName = entityName ;
		//this.logger = LoggerFactory.getLogger(controllerClass) ;
	}

	@InitBinder
	public void initBinder(WebDataBinder binder, HttpServletRequest request) {
		Locale locale = RequestContextUtils.getLocale(request);
		binder.registerCustomEditor(Date.class, getCustomDateEditor(locale));
	}
	
	private CustomDateEditor getCustomDateEditor(Locale locale) {
		CustomDateEditor customDateEditor = customDateEditorByLocales.get(locale);
		if(customDateEditor == null) {
			String dateFormatPattern = messageSource.getMessage(DATE_FORMAT_PATTERN, null, locale);
			SimpleDateFormat dateFormat = new SimpleDateFormat(dateFormatPattern);
			customDateEditor = new CustomDateEditor(dateFormat, true);
			customDateEditorByLocales.put(locale, customDateEditor);
		}
		return customDateEditor;
	}

	protected void log(String msg) {
		logger.info(msg);
	}

	protected void logContent(Model model) {
		Map<String,Object> map = model.asMap();
		logger.info("Model content (size = " + map.size() + ") : ");
		for (Map.Entry<String,Object> entry : map.entrySet()) {
			logger.info(" . '" + entry.getKey() + "' : " + entry.getValue() );
		}
	}
	
	@SuppressWarnings("unchecked")
	protected void logSessionContent(HttpSession session) {
		Enumeration<String> enumNames = session.getAttributeNames();
		List<String> names = Collections.list(enumNames);
		logger.info("Session content (size = " + names.size() + ") : ");
		for ( String name : names ) {
			logger.info(" . '" + name + "' : " + session.getAttribute(name) );
		}
	}	
	private static final String URI_SEPARATOR = "/";
	
	protected String encodeUrlPathSegments(HttpServletRequest httpServletRequest, Object... pathSegments) {
		//--- get character encoding
		String characterEncoding = httpServletRequest.getCharacterEncoding();
		if (characterEncoding == null) {
			characterEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;
		}

		//--- encode N segments
		StringBuffer sb = new StringBuffer();
		int n = 0 ;
		for (Object segment : pathSegments) {
			n++ ;
			if (n > 1) { 
				sb.append(URI_SEPARATOR);
			}
			//--- encode 1 segment
			try {
				String encodedSegment = UriUtils.encodePathSegment(segment.toString(), characterEncoding);
				sb.append(encodedSegment);
			} catch (UnsupportedEncodingException uee) {
				throw new RuntimeException("encodePathSegment error", uee);
			}

			//sb.append(this.encodeUrlPathSegment(httpServletRequest, segment.toString()));
		}
		return sb.toString();
	}
	
	/**
	 * Returns "redirect:/entityName" 
	 * @return
	 */
	protected String redirectToList() {
		return "redirect:/" + this.entityName ;
	}

	/**
	 * Returns "redirect:/entityName/form/id1/id2/..." 
	 * @param httpServletRequest
	 * @param idParts
	 * @return
	 */
	protected String redirectToForm(HttpServletRequest httpServletRequest, Object... idParts) {
		return "redirect:" + getFormURL(httpServletRequest, idParts);
	}

	/**
	 * Returns "/entityName/form/id1/id2/..." 
	 * @param httpServletRequest
	 * @param idParts
	 * @return
	 */
	protected String getFormURL(HttpServletRequest httpServletRequest, Object... idParts) {
		return "/" + this.entityName + "/form/" + encodeUrlPathSegments(httpServletRequest, idParts );
	}
	
	public void securityCheck(Model model, HttpServletRequest request) {
		
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		
//	    System.out.println("test: " + auth.getName());
	    
	    
	    if (!auth.getName().equals("anonymousUser")) { // 비회원이 아닐 경우
	    	Users user = (Users)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	    	model.addAttribute("user", user.getName());
	    	model.addAttribute("id", user.getId());
	    	if (request.isUserInRole("ROLE_ADMIN")) { // 관리자일 경우
	    		model.addAttribute("admin", true);
			}else{ // 일반회원일 경우
				model.addAttribute("member", true);
				model.addAttribute("admin", false);
			}
		}
	    else
	    {
	    	// 비회원일 경우
	    	model.addAttribute("member", false);
	    }
		
	}

	public void sendMail(String title, String recvMail, String velocityid, Map<String, Object> params) throws AddressException, MessagingException {
		
		String body =  VelocityEngineUtils.mergeTemplateIntoString(velocityConfig.getVelocityEngine(), velocityid, "UTF-8", params);
		AmazonSES ses = new AmazonSES(title, body, recvMail);
		ses.sendMail();
	}

	public HashMap<String, Object> SUCCESS(HashMap<String, Object> ret)
	{
		ret.put("success", true);
		ret.put("message", "정상처리 되었습니다.");
		System.out.println("success:"+ret.toString());
		return ret;
	}
	
	public HashMap<String, Object> FAIL(HashMap<String, Object> ret, String message)
	{
		ret.put("success", false);
		ret.put("message", message);
		System.out.println("fail:"+ret.toString());
		return ret;
	}
	
	public String uploadS3(String prefix, MultipartFile file, String extension)
	{
		String fileName = UUID.randomUUID().toString()+"."+extension;		 
		String path = prefix+"/"+fileName;
		System.out.println("upload file:"+path);
		
	    try {
	        InputStream is = file.getInputStream();
	        byte[] contentBytes = IOUtils.toByteArray(is);
	        ByteArrayInputStream bis = new ByteArrayInputStream(contentBytes);
	        Long contentLength = Long.valueOf(contentBytes.length);
	        
	        System.out.println("contentLength:"+contentLength);
	        ObjectMetadata metadata = new ObjectMetadata();
		    metadata.setContentLength(contentLength);
		    
		    
		    if (amazonS3FileManager.upload(path, bis, metadata))
		    	return path;
		    else
		    	return null;
		     
	    } 
	    catch (IOException e) 
	    {
	        System.err.printf("Failed while reading bytes from %s", e.getMessage());
	        return null;
	    } 		
	}

	public String uploadS3_Movie(String prefix, MultipartFile file, String fileName)
	{
		String directory_path = UUID.randomUUID().toString();
		String path = prefix+"/"+directory_path+"/"+fileName;
	 
		System.out.println("upload file:"+path);
	    try {
	    	System.out.println("begin upload file in Amazon Service:"+path);
	        InputStream is = file.getInputStream();
	        byte[] contentBytes = IOUtils.toByteArray(is);
	        ByteArrayInputStream bis = new ByteArrayInputStream(contentBytes);
	        Long contentLength = Long.valueOf(contentBytes.length);
	        
	        System.out.println("	:"+contentLength);
	        ObjectMetadata metadata = new ObjectMetadata();
		    metadata.setContentLength(contentLength);
		    if (amazonS3FileManager.upload(path, bis, metadata)){
		    	System.out.println("amazonS3FileManager upload");
		    	return directory_path;
		    }
		    else{
		    	System.out.println("amazonS3FileManager null");
		    	return null;
		    }
		    	
		     
	    } 
	    catch (IOException e) 
	    {
	        System.err.printf("Failed while reading bytes from %s", e.getMessage());
	        return null;
	    }catch (Exception e) {
			System.err.println("Exception: "+e);
			 return null;
		} 		
	}

	public boolean deleteS3(String filePath)
	{
		System.out.println("delete file:"+filePath);
	    return amazonS3FileManager.delete(filePath);	
	}
}