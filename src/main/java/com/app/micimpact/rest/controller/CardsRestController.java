/*
 * Created on 9 12월 2015 ( Time 16:26:40 )
 * Generated by Telosys Tools Generator ( version 2.1.0 )
 */
package com.app.micimpact.rest.controller;

import java.net.URL;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.apache.http.HttpResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import com.app.micimpact.bean.CardTags;
import com.app.micimpact.bean.Cards;
import com.app.micimpact.bean.Categories;
import com.app.micimpact.bean.Collections;
import com.app.micimpact.bean.CommentLikes;
import com.app.micimpact.bean.Comments;
import com.app.micimpact.bean.Images;
import com.app.micimpact.bean.Likes;
import com.app.micimpact.bean.Point;
import com.app.micimpact.bean.Report;
import com.app.micimpact.bean.ReportCards;
import com.app.micimpact.bean.Stats;
import com.app.micimpact.bean.UserTags;
import com.app.micimpact.bean.Users;
import com.app.micimpact.bean.jpa.PointEntity;
import com.app.micimpact.business.service.CardTagsService;
import com.app.micimpact.business.service.CardsService;
import com.app.micimpact.business.service.CategoriesService;
import com.app.micimpact.business.service.CollectionsService;
import com.app.micimpact.business.service.CommentLikesService;
import com.app.micimpact.business.service.CommentsService;
import com.app.micimpact.business.service.ImagesService;
import com.app.micimpact.business.service.LikesService;
import com.app.micimpact.business.service.PointService;
import com.app.micimpact.business.service.ReportCardsService;
import com.app.micimpact.business.service.ReportService;
import com.app.micimpact.business.service.StatsService;
import com.app.micimpact.business.service.UserTagsService;
import com.app.micimpact.business.service.UsersService;
import com.app.micimpact.business.service.mapping.PointServiceMapper;
import com.app.micimpact.business.service.mapping.ReportCardsServiceMapper;
import com.app.micimpact.rest.common.AbstractRestController;
import com.app.micimpact.rest.common.notification.Notification;
import com.app.micimpact.web.common.Kakao;
import com.app.micimpact.web.common.ProcessPoint;
import com.app.micimpact.web.common.Utils;
import com.restfb.DefaultFacebookClient;
import com.restfb.Parameter;
import com.restfb.types.FacebookType;


/**
 * Spring MVC controller for 'Cards' management.
 */
@RequestMapping("/card")
@Controller
public class CardsRestController extends AbstractRestController{

	@Value("#{commonConfig['s3.profile.path']}")
	protected String profile_upload_path;
	
	@Resource
	private UsersService usersService;
	
	@Resource
	private CardsService cardsService;
	
	@Resource
	private ImagesService imagesService;
	
	@Resource
	private CardTagsService cardTagsService;
	
	@Resource
	private CollectionsService collectionsService;
	
	@Resource
	private UserTagsService userTagsService;
	
	@Resource
	private LikesService likesService;
	
	@Resource
	private CommentsService commentsService;
	
	@Resource
	private CommentLikesService commentLikesService;

	@Resource
	private ReportService reportService;
	
	@Resource
	private CategoriesService categoriesService;
	
	@Resource
	private PointService pointService;
	
	@Resource
	private StatsService statsService;
	
	@Resource
	private PointServiceMapper pointServiceMapper;
	
	@Resource
	private ReportCardsService reportCardsService;
	
	private void setupImagePathAndTag(List<Cards> cards)
	{
		Integer[] card_ids = new Integer[cards.size()];
		Integer[] user_ids = new Integer[cards.size()];
		int i =0;
		for (Cards card : cards)
		{
			card_ids[i] = card.getId();
			user_ids[i] = card.getUserId();
			i++;
		}
//		HashMap<Integer, Users> mapToUser = new HashMap<Integer, Users>();
		HashMap<Integer, Cards> mapToCard = new HashMap<Integer, Cards>();
		for (Cards card : cards) {
			mapToCard.put(card.getId(), card);
			card.setImages(new ArrayList<String>());
			card.setTags(new ArrayList<String>());
		}
		
		List<Images> images = imagesService.findByCardIdIn(card_ids);
		for (Images image : images)
			mapToCard.get(image.getCardId()).getImages().add(image.getImageUrl());
		
		List<CardTags> tags = cardTagsService.findByCardIdIn(card_ids);
		for (CardTags tag : tags)
			mapToCard.get(tag.getCardId()).getTags().add(tag.getName());

	}
	
	private Cards setupImagePathAndTag(Cards card)
	{
		ArrayList<Cards> cards = new ArrayList<Cards>();
		cards.add(card);
		setupImagePathAndTag(cards);
		return cards.get(0);
	}
	
	
	@RequestMapping( value="/main_cards",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> mainCards(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		
		List<Cards> cards = null;
		//List<Cards> rev_cards = null;
		
		if (login_user==null || login_user.getId()==null)
			cards= cardsService.findMainList(3);
		else 
		{
			if (lastId==null)
				cards = cardsService.findMainList(5); 
			else
				cards = cardsService.findMainList(lastId, 5);
		}
		
		System.out.println("card count:"+cards.size());
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/week_popular",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> weekCards(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		
		
		List<Cards> cards = null;
		if (lastId==null)
			cards = cardsService.findByWeekPopular(count);
		else
			cards = cardsService.findByWeekPopularByLastId(lastId, count);
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/collection",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> weekCards(Principal principal) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
	
		Collections collection = collectionsService.findByReveal();
		Integer[] card_ids = new Integer[3];
		card_ids[0] = collection.getCardId1();
		card_ids[1] = collection.getCardId2();
		card_ids[2] = collection.getCardId3()==null ? 0 : collection.getCardId3();
		List<Cards> cards = cardsService.findByIdIn(card_ids);

		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		ret.put("name", collection.getName());
		ret.put("body", collection.getBody());
		
		return SUCCESS(ret);
	}

	@RequestMapping( value="/recent",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> recent(UsernamePasswordAuthenticationToken principal) 
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		if (login_user.getRecentCardId()==null)
		{
			ret.put("user_id", null);
			return SUCCESS(ret);
		}
		
		Cards recentCard = cardsService.findById(login_user.getRecentCardId());
		//Users writer = usersService.findById(recentCard.getUserId());
		
		List<Cards> cards = cardsService.findByActor(recentCard.getActor(), 6);
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		//ret.put("user_id", writer.getId());
		ret.put("actor", recentCard.getActor());
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/category/{category_id}",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> categoryCards(UsernamePasswordAuthenticationToken principal,
			@PathVariable("category_id") Integer categoryId,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count) 
	{
		System.out.println("categoryId:"+categoryId);
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		List<Cards> cards = null;
		if (categoryId==0 )
		{
			if (lastId==null)
				cards = cardsService.findByCount(count);
			else
				cards = cardsService.findByLastId(lastId, count);
		}
		else
		{
			if (lastId==null)
				cards = cardsService.findByCategoryId(categoryId, count);
			else
				cards = cardsService.findByCategoryId(categoryId, lastId, count);
		}
		
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/category/{category_id}/card_recommends",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> recommendCards(UsernamePasswordAuthenticationToken principal,
			@PathVariable("category_id") Integer categoryId,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count)
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		List<Cards> cards = null;
		if (categoryId==0)
		{
			if (lastId==null)
				cards = cardsService.findByRecommendedSortByLikesExceptCard(count);
			else
				cards = cardsService.findByRecommendedSortByLikesExceptCard(lastId, count);
		}
		else
		{
			if (lastId==null)
				cards = cardsService.findByCategoryIdRecommendSortByLikesExceptCard(categoryId, count);
			else
				cards = cardsService.findByCategoryIdRecommendSortByLikesExceptCard(categoryId, lastId, count);
		}
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/category/{category_id}/recommends",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> recommandCards(UsernamePasswordAuthenticationToken principal,
			@PathVariable("category_id") Integer categoryId,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count,
			@RequestParam(value="card_id",defaultValue="") Integer card_id) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		List<Cards> cards = null;
		if (categoryId==0)
		{
			if (lastId==null)
				cards = cardsService.findBySortByLikesExceptCard(count,card_id);
			else
				cards = cardsService.findBySortByLikesExceptCard(lastId, count,card_id);
		}
		else
		{
			if (lastId==null)
				cards = cardsService.findByCategoryIdSortByLikesExceptCard(categoryId, count,card_id);
			else
				cards = cardsService.findByCategoryIdSortByLikesExceptCard(categoryId, lastId, count,card_id);
		}
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/actor",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> userCards(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="actor", required=false) String actor,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (actor==null)
		{
			return FAIL(ret, "필요 인자가 없습니다.");
		}
		
		List<Cards> cards = null;
		if (lastId==null)
			cards = cardsService.findByActor(actor, count);
		else
			cards = cardsService.findByActor(actor, lastId, count);
		
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/interest",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> interest(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		List<UserTags> userTags = userTagsService.findByUserId(login_user.getId());
		
		String[] tags = new String[userTags.size()];
		int i=0;
		for (UserTags tag : userTags) {
			tags[i] = tag.getName();
			i++;
		}
		
		List<Cards> cards = null;
		if (tags.length != 0)
		{
			if (lastId==null)
				cards = cardsService.findByTagIn(tags, count);
			else
				cards = cardsService.findByTagIn(tags, lastId, count);
		}
		else
			cards = new ArrayList<Cards>();
		
		System.out.println("interest size:"+cards.size());
		ret.put("cards", cards);
		return SUCCESS(ret);
	}

	@RequestMapping( value="/favorites",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> favorites(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}

		List<Cards> cards = null;
		if (lastId==null)
			cards = cardsService.findByLikeUserId(login_user.getId(), count);
		else
			cards = cardsService.findByLikeUserId(login_user.getId(), lastId, count);
		
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/tag_search",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> tag_search(UsernamePasswordAuthenticationToken principal,
			@RequestParam(value="tag", required=false) String tag,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="5") Integer count)  
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (tag == null)
		{
			return FAIL(ret, "태그를 입력해주세요.");
		}
		
		String[] tags = tag.split(",");
		List<Cards> cards = null;
		if (tags.length != 0)
		{
			if (lastId==null)
				cards = cardsService.findByTagIn(tags, count);
			else
				cards = cardsService.findByTagIn(tags, lastId, count);
		}
		else
			cards = new ArrayList<Cards>();
		
		setupImagePathAndTag(cards);
		ret.put("cards", cards);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{id}",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> findCard(UsernamePasswordAuthenticationToken principal, @PathVariable("id") Integer id) {
		
		System.out.println("card_id:"+id);
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		Cards card = cardsService.findById(id);
		card.setHitCount(card.getHitCount()+1);
		cardsService.update(card);
		Users writer = usersService.findById(card.getUserId());
		card.setUserName(writer.getName());
		card.setJob(writer.getJob());
		if(card.getCategoryId()!=null){
			Categories category = categoriesService.findById(card.getCategoryId());
			card.setCategoryName(category.getName());
			
		}
		card = setupImagePathAndTag(card);
		if (login_user!=null && login_user.getId()!=null){
			Likes like = likesService.findByUserIdAndCardId(login_user.getId(), card.getId());
			card.setIsLike(like!=null);
			login_user.setRecentCardId(id);
			usersService.update(login_user);
		}
		Stats s =new Stats();
		s.setCardId(id);
		s.setCreateAt(new Date());
		s.setType(1);
		statsService.create(s);
		ret.put("card", card);
		return SUCCESS(ret);
	}
	
	
	@RequestMapping( value="/see_content_add_point",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> see_content_add_point(UsernamePasswordAuthenticationToken principal) {
		
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		//login_user=usersService.findById(144);
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
			List<PointEntity> list_point=pointService.findByUserIdAndCreatat(login_user.getId(), new Date());
			if(list_point!=null && list_point.size()>0){
				try {
					Point point = pointServiceMapper.mapPointEntityToPoint(list_point.get(0)) ;
					if(point.getSeeContentTimes()<10){
						point.setSeeContentTimes(point.getSeeContentTimes()+1);
						pointService.update(point);
						login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_SEE_CONTENT);
						Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
						login_user.setLevel(level);
						usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
					}
				} catch (Exception e) {
					System.err.println(e);
				}
			}else{
				Point point =new Point();
				point.setCreatat(new Date());
				point.setCommentTimes(0);
				point.setLoginTimes(0);
				point.setSeeContentTimes(1);
				point.setShareTimes(0);
				point.setUserId(login_user.getId());
				pointService.create(point);
				if(login_user.getPoint()==null||login_user.getPoint()<50){
					login_user.setPoint(50);
				}
				login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_SEE_CONTENT);
				Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
				login_user.setLevel(level);
				usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
			}
			ret.put("level", login_user.getLevel());
			ret.put("point", login_user.getPoint() );
	
		return SUCCESS(ret);
	}
	
	
	
	
	

	@RequestMapping( value="/{card_id}/like",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> cardLike(UsernamePasswordAuthenticationToken principal, 
			@PathVariable("card_id") Integer cardId) {
		
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		Likes likes = likesService.findByUserIdAndCardId(login_user.getId(), cardId);
		if (likes==null)
		{
			likes = new Likes();
			likes.setUserId(login_user.getId());
			likes.setCardId(cardId);
			if (likesService.create(likes)==null)
			{
				return FAIL(ret, "처리중 오류가 발생하였습니다.");
			}
		}
		else
		{
			System.out.println("likes.getId():"+likes.getId());
			likesService.delete(likes.getId());
		}
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{card_id}/comment/{comment_id}/report/create",
			method = {RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> cardReport(UsernamePasswordAuthenticationToken principal,
			@PathVariable("comment_id") Integer commentId,
			@PathVariable("card_id") Integer cardId,
			@RequestParam(value="reason", required=false) Integer reason) {
		
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		if (reason==null)
		{
			return FAIL(ret, "이유를 입력해주세요.");
		}
		Report report = new Report();
		report.setUserId(login_user.getId());
		report.setCommentId(commentId);
		report.setKind(reason);
		report.setCreatedAt(new Date());
		report = reportService.create(report);
		if (report==null)
		{
			return FAIL(ret, "처리중 오류가 발생하였습니다.");
		}
	
		return SUCCESS(ret);
	}
	
	
	@RequestMapping( value="/{card_id}/comment/create",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> commentCreate(UsernamePasswordAuthenticationToken principal,
			@PathVariable(value="card_id") Integer cardId,
			@RequestParam(value="body", required=false) String body,
			@RequestParam(value="facebook_access_token", required=false) String facebook_access_token,
			@RequestParam(value="kakao_access_token", required=false) String kakao_access_token,
			@RequestParam(value="url", defaultValue="http://52.69.130.124") String url,
			HttpServletRequest request
			)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		if (body==null)
		{
			return FAIL(ret, "댓글 내용을 입력해주세요.");
		}
		
		try {
			
			
			Comments comment = new Comments();
			comment.setBody(body);
			comment.setUserId(login_user.getId());
			comment.setCardId(cardId);
			comment.setCountLike(0);
			comment.setCreatedAt(new Date());
			comment.setIsShow(1);
			comment.setCountReport(0);
			try {
				comment = commentsService.create(comment);
				List<PointEntity> list_point=pointService.findByUserIdAndCreatat(login_user.getId(), new Date());
				if(list_point!=null && list_point.size()>0){
					Point point = pointServiceMapper.mapPointEntityToPoint(list_point.get(0)) ;
					if(point.getCommentTimes()<10){
						point.setCommentTimes(point.getCommentTimes()+1);
						pointService.update(point);
						login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_COMMENT);
						Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
						login_user.setLevel(level);
						usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
					}
					
				}else{
					Point point =new Point();
					point.setCreatat(new Date());
					point.setCommentTimes(1);
					point.setLoginTimes(0);
					point.setSeeContentTimes(0);
					point.setShareTimes(0);
					point.setUserId(login_user.getId());
					pointService.create(point);
					login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_COMMENT);
					Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
					login_user.setLevel(level);
					usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
				}
				
				ret.put("level", login_user.getLevel());
				ret.put("point", login_user.getPoint());
				//Notification.sendNoti(sendUser.getDeviceid(),user.getNickname()+"님이 회원임의 게시글에 댓글을 남겼습니다.", user.getNickname()+"님이 회원임의 게시글에 댓글을 남겼습니다.",servletContext);
			} catch (Exception e) {
				// TODO: handle exception
			}
			Cards c= cardsService.findById(cardId);
			if(c!=null){
				String link_url=url+"/share/sys_1/"+cardId;
				if(facebook_access_token!=null && !facebook_access_token.equalsIgnoreCase("")){
					String accesstoken = facebook_access_token;
				    DefaultFacebookClient fbClient = new DefaultFacebookClient(accesstoken);
				    FacebookType publishMessageResponse = null;
				    		boolean status = false;
					        publishMessageResponse = fbClient.publish("me/feed", FacebookType.class, 
					                Parameter.with("message", body),
					                Parameter.with("link", link_url),
					                Parameter.with("picture", "https://d3i0w6mgohqrwj.cloudfront.net/"+c.getThumbnailUrl()),
					                Parameter.with("type", "link"),
					                Parameter.with("name", c.getTitle()),
					                Parameter.with("caption", "micimpact.com"),
					                Parameter.with("description", c.getBody()));
					        if(publishMessageResponse.getId()!=null){
					        	status=true;
					        	ret.put("post_facebook", "success");
					        }else{
					        	status=false;
					        	ret.put("post_facebook", "fail");
					        }
						}
				if(kakao_access_token!=null && !kakao_access_token.equalsIgnoreCase("")){
							try {
								Kakao k =new Kakao();
								String decription= Utils.convertToUTF8(c.getBody());
								byte ptext[] = decription.getBytes();
								String value = new String(ptext, "UTF-8");
								System.out.println(value);
								String uploadedImageUrlList= k.post_kakao(body,link_url, link_url,c.getTitle(), c.getBody(),kakao_access_token);
								System.out.println(url);
								System.out.println(uploadedImageUrlList);
								if(uploadedImageUrlList!=null){
									ret.put("post_kakao", "success");
								}else{
									ret.put("post_kakao", "fail");
								}
								
							} catch (Exception e) {
								ret.put("post_kakao", "Error: "+e);
							}
				    	}
			}
			ret.put("comment_id", comment.getId());
			return SUCCESS(ret);
		} catch (Exception e) {
			return FAIL(ret, "Error: "+e);
		}
	}
	
	@RequestMapping( value="/{card_id}/comment",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> commentList(UsernamePasswordAuthenticationToken principal,
			@PathVariable(value="card_id") Integer cardId,
			@RequestParam(value="last_id", required=false) Integer lastId,
			@RequestParam(value="count", defaultValue="99999") Integer count)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		Integer userId = login_user == null? -1 : login_user.getId();
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		
		List<Comments> comments = null;
		if (lastId==null)
			comments = commentsService.findByCardId(userId, cardId, count);
		else
			comments = commentsService.findByCardId(userId, cardId, lastId, count);
		
		ret.put("comments", comments);
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{card_id}/comment/{comment_id}",
			method = {RequestMethod.POST,RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> commentModify(UsernamePasswordAuthenticationToken principal,
			@PathVariable(value="card_id") Integer cardId,
			@PathVariable(value="comment_id") Integer commentId,
			@RequestParam(value="body", required=false) String body)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		//login_user=usersService.findById(1);
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		System.out.println("body:"+body);
		if (body==null)
		{
			return FAIL(ret, "댓글 내용을 입력해주세요.");
		}
		
		Comments updated_comment = commentsService.findById(commentId);
		if (updated_comment!=null && updated_comment.getUserId().equals(login_user.getId()))
		{
			try {
				updated_comment.setBody(body);
				commentsService.update(updated_comment);
			} catch (Exception e) {
				System.out.println(e);
			}
			
		}
		else
		{
			return FAIL(ret, "비정상적인 처리요청입니다.");
		}
		
		
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{card_id}/comment_delete/{comment_id}",
			method = {RequestMethod.POST,RequestMethod.GET,RequestMethod.DELETE},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> commentDelete(UsernamePasswordAuthenticationToken principal,
			@PathVariable(value="card_id") Integer cardId,
			@PathVariable(value="comment_id") Integer commentId)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		//login_user=usersService.findById(1);
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		Comments updated_comment = commentsService.findById(commentId);
		if (updated_comment!=null && updated_comment.getUserId().equals(login_user.getId()))
		{
			try {
				commentsService.delete(commentId);
			} catch (Exception e) {
				System.out.println(e);
			}
			
		}
		else
		{
			return FAIL(ret, "비정상적인 처리요청입니다.");
		}
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{card_id}/comment/{comment_id}/like",
			method = {RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE )
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> commentLike(UsernamePasswordAuthenticationToken principal,
			@PathVariable(value="card_id") Integer cardId,
			@PathVariable(value="comment_id") Integer commentId)  
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		
		CommentLikes commentLikes = commentLikesService.findByUserIdAndCardIdAndCommentId(login_user.getId(), cardId, commentId);
		if (commentLikes==null)
		{
			commentLikes = new CommentLikes();
			commentLikes.setUserId(login_user.getId());
			commentLikes.setCardId(cardId);
			commentLikes.setCommentId(commentId);
			if (commentLikesService.create(commentLikes)==null)
			{
				return FAIL(ret, "처리중 오류가 발생하였습니다.");
			}
		}
		else
		{
			commentLikesService.delete(commentLikes.getId());
		}
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/{card_id}/share",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> share(
			UsernamePasswordAuthenticationToken principal,
			@PathVariable("card_id") Integer cardId) 
	{
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		
		Cards card = cardsService.findById(cardId);
		if (card == null)
		{
			return FAIL(ret, "유효한 입력값이 아닙니다.");
		}
		card.setShare(card.getShare()+1);
		cardsService.update(card);
		List<PointEntity> list_point=pointService.findByUserIdAndCreatat(login_user.getId(), new Date());
		if(list_point!=null && list_point.size()>0){
			Point point = pointServiceMapper.mapPointEntityToPoint(list_point.get(0)) ;
			if(point.getShareTimes()<10){
				point.setShareTimes(point.getShareTimes()+1);
				pointService.update(point);
				login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_SHARE);
				Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
				login_user.setLevel(level);
				usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
			}
		}else{
			Point point =new Point();
			point.setCreatat(new Date());
			point.setCommentTimes(0);
			point.setLoginTimes(0);
			point.setSeeContentTimes(0);
			point.setShareTimes(1);
			point.setUserId(login_user.getId());
			pointService.create(point);
			if(login_user.getPoint()==null||login_user.getPoint()<50){
				login_user.setPoint(50);
			}
			login_user.setPoint(login_user.getPoint()+ProcessPoint.POINT_SHARE);
			Integer level =ProcessPoint.level_up(login_user.getPoint(), login_user.getLevel());
			login_user.setLevel(level);
			usersService.updatePointLevel(login_user.getPoint(), login_user.getLevel(), login_user.getId());
		}
		ret.put("level", login_user.getLevel());
		ret.put("point", login_user.getPoint() );
		return SUCCESS(ret);
	}
	
	@RequestMapping( value="/card_type/{card_id}",
			method = {RequestMethod.GET, RequestMethod.POST},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> type(
			@PathVariable("card_id") Integer cardId) 
	{
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		Cards card = cardsService.findById(cardId);
		if (card == null)
		{
			return FAIL(ret, "No card");
		}else{
				ret.put("card_type", card.getType());
				if(card.getType()==0){
					ret.put("type", "video upload");
				}else if(card.getType()==1){
					ret.put("type", "youtube");
				}else if(card.getType()==2){
					ret.put("type", "image,git");
				}
				return SUCCESS(ret);
		}
	}
	
	@RequestMapping( value="/{card_id}/report/create",
			method = {RequestMethod.POST,RequestMethod.GET},
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public HashMap<String, Object> report_cards(UsernamePasswordAuthenticationToken principal,
			@PathVariable("card_id") Integer cardId,
			@RequestParam(value="reason", required=false) Integer reason) {
		
		Users login_user = principal!=null ? (Users)principal.getPrincipal() : null;
		HashMap<String, Object> ret = new HashMap<String, Object> ();
		if (login_user==null || login_user.getId()==null)
		{
			return FAIL(ret, "비로그인 유저입니다.");
		}
		if (reason==null)
		{
			return FAIL(ret, "이유를 입력해주세요.");
		}
		ReportCards report = new ReportCards();
		report.setUserId(login_user.getId());
		report.setCardId(cardId);
		report.setKind(reason);
		report.setCreatedAt(new Date());
		report = reportCardsService.create(report);
		if (report==null)
		{
			return FAIL(ret, "처리중 오류가 발생하였습니다.");
		}
		return SUCCESS(ret);
	}
	
	
}
