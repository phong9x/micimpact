/*
 * Created on 13 5ì›” 2015 ( Time 11:43:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.app.micimpact.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import com.app.micimpact.bean.Users;
import com.app.micimpact.bean.jpa.UsersEntity;
import java.util.Date;
import java.util.List;
import com.app.micimpact.business.service.mapping.UsersServiceMapper;
import com.app.micimpact.data.repository.jpa.UsersJpaRepository;
import com.app.micimpact.test.UsersFactoryForTest;
import com.app.micimpact.test.UsersEntityFactoryForTest;
import com.app.micimpact.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UsersService
 */
@RunWith(MockitoJUnitRunner.class)
public class UsersServiceImplTest {

	@InjectMocks
	private UsersServiceImpl usersService;
	@Mock
	private UsersJpaRepository usersJpaRepository;
	@Mock
	private UsersServiceMapper usersServiceMapper;
	
	private UsersFactoryForTest usersFactoryForTest = new UsersFactoryForTest();

	private UsersEntityFactoryForTest usersEntityFactoryForTest = new UsersEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer id = mockValues.nextInteger();
		
		UsersEntity usersEntity = usersJpaRepository.findOne(id);
		
		Users users = usersFactoryForTest.newUsers();
		when(usersServiceMapper.mapUsersEntityToUsers(usersEntity)).thenReturn(users);

		// When
		Users usersFound = usersService.findById(id);

		// Then
		assertEquals(users.getId(),usersFound.getId());
	}

	@Test
	public void findAll() {
		// Given
		List<UsersEntity> usersEntitys = new ArrayList<UsersEntity>();
		UsersEntity usersEntity1 = usersEntityFactoryForTest.newUsersEntity();
		usersEntitys.add(usersEntity1);
		UsersEntity usersEntity2 = usersEntityFactoryForTest.newUsersEntity();
		usersEntitys.add(usersEntity2);
		when(usersJpaRepository.findAll()).thenReturn(usersEntitys);
		
		Users users1 = usersFactoryForTest.newUsers();
		when(usersServiceMapper.mapUsersEntityToUsers(usersEntity1)).thenReturn(users1);
		Users users2 = usersFactoryForTest.newUsers();
		when(usersServiceMapper.mapUsersEntityToUsers(usersEntity2)).thenReturn(users2);

		// When
		List<Users> userssFounds = usersService.findAll();

		// Then
		assertTrue(users1 == userssFounds.get(0));
		assertTrue(users2 == userssFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Users users = usersFactoryForTest.newUsers();

		UsersEntity usersEntity = usersEntityFactoryForTest.newUsersEntity();
		when(usersJpaRepository.findOne(users.getId())).thenReturn(null);
		
		usersEntity = new UsersEntity();
		usersServiceMapper.mapUsersToUsersEntity(users, usersEntity);
		UsersEntity usersEntitySaved = usersJpaRepository.save(usersEntity);
		
		Users usersSaved = usersFactoryForTest.newUsers();
		when(usersServiceMapper.mapUsersEntityToUsers(usersEntitySaved)).thenReturn(usersSaved);

		// When
		Users usersResult = usersService.create(users);

		// Then
		assertTrue(usersResult == usersSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Users users = usersFactoryForTest.newUsers();

		UsersEntity usersEntity = usersEntityFactoryForTest.newUsersEntity();
		when(usersJpaRepository.findOne(users.getId())).thenReturn(usersEntity);

		// When
		Exception exception = null;
		try {
			usersService.create(users);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Users users = usersFactoryForTest.newUsers();

		UsersEntity usersEntity = usersEntityFactoryForTest.newUsersEntity();
		when(usersJpaRepository.findOne(users.getId())).thenReturn(usersEntity);
		
		UsersEntity usersEntitySaved = usersEntityFactoryForTest.newUsersEntity();
		when(usersJpaRepository.save(usersEntity)).thenReturn(usersEntitySaved);
		
		Users usersSaved = usersFactoryForTest.newUsers();
		when(usersServiceMapper.mapUsersEntityToUsers(usersEntitySaved)).thenReturn(usersSaved);

		// When
		Users usersResult = usersService.update(users);

		// Then
		verify(usersServiceMapper).mapUsersToUsersEntity(users, usersEntity);
		assertTrue(usersResult == usersSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer id = mockValues.nextInteger();

		// When
		usersService.delete(id);

		// Then
		verify(usersJpaRepository).delete(id);
		
	}

}
